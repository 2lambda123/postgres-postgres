/* automatically generated by rust-bindgen 0.69.4 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::core::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::core::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::core::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::core::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::core::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const PG_DIAG_SEVERITY: u8 = 83u8;
pub const PG_DIAG_SEVERITY_NONLOCALIZED: u8 = 86u8;
pub const PG_DIAG_SQLSTATE: u8 = 67u8;
pub const PG_DIAG_MESSAGE_PRIMARY: u8 = 77u8;
pub const PG_DIAG_MESSAGE_DETAIL: u8 = 68u8;
pub const PG_DIAG_MESSAGE_HINT: u8 = 72u8;
pub const PG_DIAG_STATEMENT_POSITION: u8 = 80u8;
pub const PG_DIAG_INTERNAL_POSITION: u8 = 112u8;
pub const PG_DIAG_INTERNAL_QUERY: u8 = 113u8;
pub const PG_DIAG_CONTEXT: u8 = 87u8;
pub const PG_DIAG_SCHEMA_NAME: u8 = 115u8;
pub const PG_DIAG_TABLE_NAME: u8 = 116u8;
pub const PG_DIAG_COLUMN_NAME: u8 = 99u8;
pub const PG_DIAG_DATATYPE_NAME: u8 = 100u8;
pub const PG_DIAG_CONSTRAINT_NAME: u8 = 110u8;
pub const PG_DIAG_SOURCE_FILE: u8 = 70u8;
pub const PG_DIAG_SOURCE_LINE: u8 = 76u8;
pub const PG_DIAG_SOURCE_FUNCTION: u8 = 82u8;
pub const ALIGNOF_DOUBLE: u32 = 8;
pub const ALIGNOF_INT: u32 = 4;
pub const ALIGNOF_LONG: u32 = 8;
pub const ALIGNOF_PG_INT128_TYPE: u32 = 16;
pub const ALIGNOF_SHORT: u32 = 2;
pub const BLCKSZ: u32 = 8192;
pub const CONFIGURE_ARGS: &[u8; 50] = b" '--prefix=/usr/local/pgsql' '--without-readline'\0";
pub const DEF_PGPORT: u32 = 5432;
pub const DEF_PGPORT_STR: &[u8; 5] = b"5432\0";
pub const DLSUFFIX: &[u8; 4] = b".so\0";
pub const HAVE_ATOMICS: u32 = 1;
pub const HAVE_BACKTRACE_SYMBOLS: u32 = 1;
pub const HAVE_COMPUTED_GOTO: u32 = 1;
pub const HAVE_COPY_FILE_RANGE: u32 = 1;
pub const HAVE_DECL_FDATASYNC: u32 = 1;
pub const HAVE_DECL_F_FULLFSYNC: u32 = 0;
pub const HAVE_DECL_POSIX_FADVISE: u32 = 1;
pub const HAVE_DECL_PREADV: u32 = 1;
pub const HAVE_DECL_PWRITEV: u32 = 1;
pub const HAVE_DECL_STRLCAT: u32 = 0;
pub const HAVE_DECL_STRLCPY: u32 = 0;
pub const HAVE_DECL_STRNLEN: u32 = 1;
pub const HAVE_EXECINFO_H: u32 = 1;
pub const HAVE_EXPLICIT_BZERO: u32 = 1;
pub const HAVE_FSEEKO: u32 = 1;
pub const HAVE_GCC__ATOMIC_INT32_CAS: u32 = 1;
pub const HAVE_GCC__ATOMIC_INT64_CAS: u32 = 1;
pub const HAVE_GCC__SYNC_CHAR_TAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT32_CAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT32_TAS: u32 = 1;
pub const HAVE_GCC__SYNC_INT64_CAS: u32 = 1;
pub const HAVE_GETIFADDRS: u32 = 1;
pub const HAVE_GETOPT: u32 = 1;
pub const HAVE_GETOPT_H: u32 = 1;
pub const HAVE_GETOPT_LONG: u32 = 1;
pub const HAVE_IFADDRS_H: u32 = 1;
pub const HAVE_INET_ATON: u32 = 1;
pub const HAVE_INET_PTON: u32 = 1;
pub const HAVE_INTTYPES_H: u32 = 1;
pub const HAVE_INT_OPTERR: u32 = 1;
pub const HAVE_INT_TIMEZONE: u32 = 1;
pub const HAVE_LANGINFO_H: u32 = 1;
pub const HAVE_LIBM: u32 = 1;
pub const HAVE_LIBZ: u32 = 1;
pub const HAVE_LONG_INT_64: u32 = 1;
pub const HAVE_MEMORY_H: u32 = 1;
pub const HAVE_MKDTEMP: u32 = 1;
pub const HAVE_POSIX_FADVISE: u32 = 1;
pub const HAVE_POSIX_FALLOCATE: u32 = 1;
pub const HAVE_PPOLL: u32 = 1;
pub const HAVE_PTHREAD: u32 = 1;
pub const HAVE_PTHREAD_BARRIER_WAIT: u32 = 1;
pub const HAVE_PTHREAD_PRIO_INHERIT: u32 = 1;
pub const HAVE_SOCKLEN_T: u32 = 1;
pub const HAVE_SPINLOCKS: u32 = 1;
pub const HAVE_STDBOOL_H: u32 = 1;
pub const HAVE_STDINT_H: u32 = 1;
pub const HAVE_STDLIB_H: u32 = 1;
pub const HAVE_STRCHRNUL: u32 = 1;
pub const HAVE_STRERROR_R: u32 = 1;
pub const HAVE_STRINGS_H: u32 = 1;
pub const HAVE_STRING_H: u32 = 1;
pub const HAVE_STRNLEN: u32 = 1;
pub const HAVE_STRSIGNAL: u32 = 1;
pub const HAVE_STRUCT_OPTION: u32 = 1;
pub const HAVE_STRUCT_TM_TM_ZONE: u32 = 1;
pub const HAVE_SYNCFS: u32 = 1;
pub const HAVE_SYNC_FILE_RANGE: u32 = 1;
pub const HAVE_SYSLOG: u32 = 1;
pub const HAVE_SYS_EPOLL_H: u32 = 1;
pub const HAVE_SYS_PERSONALITY_H: u32 = 1;
pub const HAVE_SYS_PRCTL_H: u32 = 1;
pub const HAVE_SYS_SIGNALFD_H: u32 = 1;
pub const HAVE_SYS_STAT_H: u32 = 1;
pub const HAVE_SYS_TYPES_H: u32 = 1;
pub const HAVE_TERMIOS_H: u32 = 1;
pub const HAVE_TYPEOF: u32 = 1;
pub const HAVE_UNISTD_H: u32 = 1;
pub const HAVE_USELOCALE: u32 = 1;
pub const HAVE_VISIBILITY_ATTRIBUTE: u32 = 1;
pub const HAVE_X86_64_POPCNTQ: u32 = 1;
pub const HAVE_XSAVE_INTRINSICS: u32 = 1;
pub const HAVE__BOOL: u32 = 1;
pub const HAVE__BUILTIN_BSWAP16: u32 = 1;
pub const HAVE__BUILTIN_BSWAP32: u32 = 1;
pub const HAVE__BUILTIN_BSWAP64: u32 = 1;
pub const HAVE__BUILTIN_CLZ: u32 = 1;
pub const HAVE__BUILTIN_CONSTANT_P: u32 = 1;
pub const HAVE__BUILTIN_CTZ: u32 = 1;
pub const HAVE__BUILTIN_FRAME_ADDRESS: u32 = 1;
pub const HAVE__BUILTIN_OP_OVERFLOW: u32 = 1;
pub const HAVE__BUILTIN_POPCOUNT: u32 = 1;
pub const HAVE__BUILTIN_TYPES_COMPATIBLE_P: u32 = 1;
pub const HAVE__BUILTIN_UNREACHABLE: u32 = 1;
pub const HAVE__GET_CPUID: u32 = 1;
pub const HAVE__GET_CPUID_COUNT: u32 = 1;
pub const HAVE__STATIC_ASSERT: u32 = 1;
pub const INT64_MODIFIER: &[u8; 2] = b"l\0";
pub const MAXIMUM_ALIGNOF: u32 = 8;
pub const MEMSET_LOOP_LIMIT: u32 = 1024;
pub const PACKAGE_BUGREPORT: &[u8; 32] = b"pgsql-bugs@lists.postgresql.org\0";
pub const PACKAGE_NAME: &[u8; 11] = b"PostgreSQL\0";
pub const PACKAGE_STRING: &[u8; 19] = b"PostgreSQL 17devel\0";
pub const PACKAGE_TARNAME: &[u8; 11] = b"postgresql\0";
pub const PACKAGE_URL: &[u8; 28] = b"https://www.postgresql.org/\0";
pub const PACKAGE_VERSION: &[u8; 8] = b"17devel\0";
pub const PG_KRB_SRVNAM: &[u8; 9] = b"postgres\0";
pub const PG_MAJORVERSION: &[u8; 3] = b"17\0";
pub const PG_MAJORVERSION_NUM: u32 = 17;
pub const PG_MINORVERSION_NUM: u32 = 0;
pub const PG_USE_STDBOOL: u32 = 1;
pub const PG_VERSION: &[u8; 8] = b"17devel\0";
pub const PG_VERSION_NUM: u32 = 170000;
pub const PG_VERSION_STR : & [u8 ; 105] = b"PostgreSQL 17devel on x86_64-pc-linux-gnu, compiled by gcc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0, 64-bit\0" ;
pub const RELSEG_SIZE: u32 = 131072;
pub const SIZEOF_BOOL: u32 = 1;
pub const SIZEOF_LONG: u32 = 8;
pub const SIZEOF_OFF_T: u32 = 8;
pub const SIZEOF_SIZE_T: u32 = 8;
pub const SIZEOF_VOID_P: u32 = 8;
pub const STDC_HEADERS: u32 = 1;
pub const USE_AVX512_POPCNT_WITH_RUNTIME_CHECK: u32 = 1;
pub const USE_ICU: u32 = 1;
pub const USE_SSE42_CRC32C_WITH_RUNTIME_CHECK: u32 = 1;
pub const USE_SYSV_SHARED_MEMORY: u32 = 1;
pub const USE_UNNAMED_POSIX_SEMAPHORES: u32 = 1;
pub const XLOG_BLCKSZ: u32 = 8192;
pub const DEFAULT_XLOG_SEG_SIZE: u32 = 16777216;
pub const NAMEDATALEN: u32 = 64;
pub const FUNC_MAX_ARGS: u32 = 100;
pub const FMGR_ABI_EXTRA: &[u8; 11] = b"PostgreSQL\0";
pub const INDEX_MAX_KEYS: u32 = 32;
pub const PARTITION_MAX_KEYS: u32 = 32;
pub const USE_FLOAT8_BYVAL: u32 = 1;
pub const NUM_SPINLOCK_SEMAPHORES: u32 = 128;
pub const NUM_ATOMICS_SEMAPHORES: u32 = 64;
pub const MAXPGPATH: u32 = 1024;
pub const BITS_PER_BYTE: u32 = 8;
pub const ALIGNOF_BUFFER: u32 = 32;
pub const DEFAULT_BACKEND_FLUSH_AFTER: u32 = 0;
pub const DEFAULT_BGWRITER_FLUSH_AFTER: u32 = 64;
pub const DEFAULT_CHECKPOINT_FLUSH_AFTER: u32 = 32;
pub const WRITEBACK_MAX_PENDING_FLUSHES: u32 = 256;
pub const DEFAULT_PGSOCKET_DIR: &[u8; 5] = b"/tmp\0";
pub const DEFAULT_EVENT_SOURCE: &[u8; 11] = b"PostgreSQL\0";
pub const PG_CACHE_LINE_SIZE: u32 = 128;
pub const PG_IO_ALIGN_SIZE: u32 = 4096;
pub const TRACE_SORT: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _SYS_TYPES_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _ALLOCA_H: u32 = 1;
pub const _BITS_SIGNUM_GENERIC_H: u32 = 1;
pub const SIGINT: u32 = 2;
pub const SIGILL: u32 = 4;
pub const SIGABRT: u32 = 6;
pub const SIGFPE: u32 = 8;
pub const SIGSEGV: u32 = 11;
pub const SIGTERM: u32 = 15;
pub const SIGHUP: u32 = 1;
pub const SIGQUIT: u32 = 3;
pub const SIGTRAP: u32 = 5;
pub const SIGKILL: u32 = 9;
pub const SIGPIPE: u32 = 13;
pub const SIGALRM: u32 = 14;
pub const SIGIOT: u32 = 6;
pub const _BITS_SIGNUM_ARCH_H: u32 = 1;
pub const SIGSTKFLT: u32 = 16;
pub const SIGPWR: u32 = 30;
pub const SIGBUS: u32 = 7;
pub const SIGSYS: u32 = 31;
pub const SIGURG: u32 = 23;
pub const SIGSTOP: u32 = 19;
pub const SIGTSTP: u32 = 20;
pub const SIGCONT: u32 = 18;
pub const SIGCHLD: u32 = 17;
pub const SIGTTIN: u32 = 21;
pub const SIGTTOU: u32 = 22;
pub const SIGPOLL: u32 = 29;
pub const SIGXFSZ: u32 = 25;
pub const SIGXCPU: u32 = 24;
pub const SIGVTALRM: u32 = 26;
pub const SIGPROF: u32 = 27;
pub const SIGUSR1: u32 = 10;
pub const SIGUSR2: u32 = 12;
pub const SIGWINCH: u32 = 28;
pub const SIGIO: u32 = 29;
pub const SIGCLD: u32 = 17;
pub const __SIGRTMIN: u32 = 32;
pub const __SIGRTMAX: u32 = 64;
pub const _NSIG: u32 = 65;
pub const __sig_atomic_t_defined: u32 = 1;
pub const __siginfo_t_defined: u32 = 1;
pub const __SI_MAX_SIZE: u32 = 128;
pub const _BITS_SIGINFO_ARCH_H: u32 = 1;
pub const __SI_ERRNO_THEN_CODE: u32 = 1;
pub const __SI_HAVE_SIGSYS: u32 = 1;
pub const _BITS_SIGINFO_CONSTS_H: u32 = 1;
pub const __SI_ASYNCIO_AFTER_SIGIO: u32 = 1;
pub const __sigevent_t_defined: u32 = 1;
pub const __SIGEV_MAX_SIZE: u32 = 64;
pub const _BITS_SIGEVENT_CONSTS_H: u32 = 1;
pub const NSIG: u32 = 65;
pub const _BITS_SIGACTION_H: u32 = 1;
pub const SA_NOCLDSTOP: u32 = 1;
pub const SA_NOCLDWAIT: u32 = 2;
pub const SA_SIGINFO: u32 = 4;
pub const SA_ONSTACK: u32 = 134217728;
pub const SA_RESTART: u32 = 268435456;
pub const SA_NODEFER: u32 = 1073741824;
pub const SA_RESETHAND: u32 = 2147483648;
pub const SA_INTERRUPT: u32 = 536870912;
pub const SA_NOMASK: u32 = 1073741824;
pub const SA_ONESHOT: u32 = 2147483648;
pub const SA_STACK: u32 = 134217728;
pub const SIG_BLOCK: u32 = 0;
pub const SIG_UNBLOCK: u32 = 1;
pub const SIG_SETMASK: u32 = 2;
pub const _BITS_SIGCONTEXT_H: u32 = 1;
pub const FP_XSTATE_MAGIC1: u32 = 1179670611;
pub const FP_XSTATE_MAGIC2: u32 = 1179670597;
pub const __stack_t_defined: u32 = 1;
pub const _SYS_UCONTEXT_H: u32 = 1;
pub const __NGREG: u32 = 23;
pub const NGREG: u32 = 23;
pub const _BITS_SIGSTACK_H: u32 = 1;
pub const MINSIGSTKSZ: u32 = 2048;
pub const SIGSTKSZ: u32 = 8192;
pub const _BITS_SS_FLAGS_H: u32 = 1;
pub const __sigstack_defined: u32 = 1;
pub const _BITS_SIGTHREAD_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const _ERRNO_H: u32 = 1;
pub const _BITS_ERRNO_H: u32 = 1;
pub const EPERM: u32 = 1;
pub const ENOENT: u32 = 2;
pub const ESRCH: u32 = 3;
pub const EINTR: u32 = 4;
pub const EIO: u32 = 5;
pub const ENXIO: u32 = 6;
pub const E2BIG: u32 = 7;
pub const ENOEXEC: u32 = 8;
pub const EBADF: u32 = 9;
pub const ECHILD: u32 = 10;
pub const EAGAIN: u32 = 11;
pub const ENOMEM: u32 = 12;
pub const EACCES: u32 = 13;
pub const EFAULT: u32 = 14;
pub const ENOTBLK: u32 = 15;
pub const EBUSY: u32 = 16;
pub const EEXIST: u32 = 17;
pub const EXDEV: u32 = 18;
pub const ENODEV: u32 = 19;
pub const ENOTDIR: u32 = 20;
pub const EISDIR: u32 = 21;
pub const EINVAL: u32 = 22;
pub const ENFILE: u32 = 23;
pub const EMFILE: u32 = 24;
pub const ENOTTY: u32 = 25;
pub const ETXTBSY: u32 = 26;
pub const EFBIG: u32 = 27;
pub const ENOSPC: u32 = 28;
pub const ESPIPE: u32 = 29;
pub const EROFS: u32 = 30;
pub const EMLINK: u32 = 31;
pub const EPIPE: u32 = 32;
pub const EDOM: u32 = 33;
pub const ERANGE: u32 = 34;
pub const EDEADLK: u32 = 35;
pub const ENAMETOOLONG: u32 = 36;
pub const ENOLCK: u32 = 37;
pub const ENOSYS: u32 = 38;
pub const ENOTEMPTY: u32 = 39;
pub const ELOOP: u32 = 40;
pub const EWOULDBLOCK: u32 = 11;
pub const ENOMSG: u32 = 42;
pub const EIDRM: u32 = 43;
pub const ECHRNG: u32 = 44;
pub const EL2NSYNC: u32 = 45;
pub const EL3HLT: u32 = 46;
pub const EL3RST: u32 = 47;
pub const ELNRNG: u32 = 48;
pub const EUNATCH: u32 = 49;
pub const ENOCSI: u32 = 50;
pub const EL2HLT: u32 = 51;
pub const EBADE: u32 = 52;
pub const EBADR: u32 = 53;
pub const EXFULL: u32 = 54;
pub const ENOANO: u32 = 55;
pub const EBADRQC: u32 = 56;
pub const EBADSLT: u32 = 57;
pub const EDEADLOCK: u32 = 35;
pub const EBFONT: u32 = 59;
pub const ENOSTR: u32 = 60;
pub const ENODATA: u32 = 61;
pub const ETIME: u32 = 62;
pub const ENOSR: u32 = 63;
pub const ENONET: u32 = 64;
pub const ENOPKG: u32 = 65;
pub const EREMOTE: u32 = 66;
pub const ENOLINK: u32 = 67;
pub const EADV: u32 = 68;
pub const ESRMNT: u32 = 69;
pub const ECOMM: u32 = 70;
pub const EPROTO: u32 = 71;
pub const EMULTIHOP: u32 = 72;
pub const EDOTDOT: u32 = 73;
pub const EBADMSG: u32 = 74;
pub const EOVERFLOW: u32 = 75;
pub const ENOTUNIQ: u32 = 76;
pub const EBADFD: u32 = 77;
pub const EREMCHG: u32 = 78;
pub const ELIBACC: u32 = 79;
pub const ELIBBAD: u32 = 80;
pub const ELIBSCN: u32 = 81;
pub const ELIBMAX: u32 = 82;
pub const ELIBEXEC: u32 = 83;
pub const EILSEQ: u32 = 84;
pub const ERESTART: u32 = 85;
pub const ESTRPIPE: u32 = 86;
pub const EUSERS: u32 = 87;
pub const ENOTSOCK: u32 = 88;
pub const EDESTADDRREQ: u32 = 89;
pub const EMSGSIZE: u32 = 90;
pub const EPROTOTYPE: u32 = 91;
pub const ENOPROTOOPT: u32 = 92;
pub const EPROTONOSUPPORT: u32 = 93;
pub const ESOCKTNOSUPPORT: u32 = 94;
pub const EOPNOTSUPP: u32 = 95;
pub const EPFNOSUPPORT: u32 = 96;
pub const EAFNOSUPPORT: u32 = 97;
pub const EADDRINUSE: u32 = 98;
pub const EADDRNOTAVAIL: u32 = 99;
pub const ENETDOWN: u32 = 100;
pub const ENETUNREACH: u32 = 101;
pub const ENETRESET: u32 = 102;
pub const ECONNABORTED: u32 = 103;
pub const ECONNRESET: u32 = 104;
pub const ENOBUFS: u32 = 105;
pub const EISCONN: u32 = 106;
pub const ENOTCONN: u32 = 107;
pub const ESHUTDOWN: u32 = 108;
pub const ETOOMANYREFS: u32 = 109;
pub const ETIMEDOUT: u32 = 110;
pub const ECONNREFUSED: u32 = 111;
pub const EHOSTDOWN: u32 = 112;
pub const EHOSTUNREACH: u32 = 113;
pub const EALREADY: u32 = 114;
pub const EINPROGRESS: u32 = 115;
pub const ESTALE: u32 = 116;
pub const EUCLEAN: u32 = 117;
pub const ENOTNAM: u32 = 118;
pub const ENAVAIL: u32 = 119;
pub const EISNAM: u32 = 120;
pub const EREMOTEIO: u32 = 121;
pub const EDQUOT: u32 = 122;
pub const ENOMEDIUM: u32 = 123;
pub const EMEDIUMTYPE: u32 = 124;
pub const ECANCELED: u32 = 125;
pub const ENOKEY: u32 = 126;
pub const EKEYEXPIRED: u32 = 127;
pub const EKEYREVOKED: u32 = 128;
pub const EKEYREJECTED: u32 = 129;
pub const EOWNERDEAD: u32 = 130;
pub const ENOTRECOVERABLE: u32 = 131;
pub const ERFKILL: u32 = 132;
pub const EHWPOISON: u32 = 133;
pub const ENOTSUP: u32 = 95;
pub const _LOCALE_H: u32 = 1;
pub const _BITS_LOCALE_H: u32 = 1;
pub const __LC_CTYPE: u32 = 0;
pub const __LC_NUMERIC: u32 = 1;
pub const __LC_TIME: u32 = 2;
pub const __LC_COLLATE: u32 = 3;
pub const __LC_MONETARY: u32 = 4;
pub const __LC_MESSAGES: u32 = 5;
pub const __LC_ALL: u32 = 6;
pub const __LC_PAPER: u32 = 7;
pub const __LC_NAME: u32 = 8;
pub const __LC_ADDRESS: u32 = 9;
pub const __LC_TELEPHONE: u32 = 10;
pub const __LC_MEASUREMENT: u32 = 11;
pub const __LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE: u32 = 0;
pub const LC_NUMERIC: u32 = 1;
pub const LC_TIME: u32 = 2;
pub const LC_COLLATE: u32 = 3;
pub const LC_MONETARY: u32 = 4;
pub const LC_MESSAGES: u32 = 5;
pub const LC_ALL: u32 = 6;
pub const LC_PAPER: u32 = 7;
pub const LC_NAME: u32 = 8;
pub const LC_ADDRESS: u32 = 9;
pub const LC_TELEPHONE: u32 = 10;
pub const LC_MEASUREMENT: u32 = 11;
pub const LC_IDENTIFICATION: u32 = 12;
pub const LC_CTYPE_MASK: u32 = 1;
pub const LC_NUMERIC_MASK: u32 = 2;
pub const LC_TIME_MASK: u32 = 4;
pub const LC_COLLATE_MASK: u32 = 8;
pub const LC_MONETARY_MASK: u32 = 16;
pub const LC_MESSAGES_MASK: u32 = 32;
pub const LC_PAPER_MASK: u32 = 128;
pub const LC_NAME_MASK: u32 = 256;
pub const LC_ADDRESS_MASK: u32 = 512;
pub const LC_TELEPHONE_MASK: u32 = 1024;
pub const LC_MEASUREMENT_MASK: u32 = 2048;
pub const LC_IDENTIFICATION_MASK: u32 = 4096;
pub const LC_ALL_MASK: u32 = 8127;
pub const HAVE_PG_ATTRIBUTE_NORETURN: u32 = 1;
pub const HAVE_PRAGMA_GCC_SYSTEM_HEADER: u32 = 1;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const INT64_FORMAT: &[u8; 4] = b"%ld\0";
pub const UINT64_FORMAT: &[u8; 4] = b"%lu\0";
pub const HAVE_INT128: u32 = 1;
pub const PG_INT8_MIN: i32 = -128;
pub const PG_INT8_MAX: u32 = 127;
pub const PG_UINT8_MAX: u32 = 255;
pub const PG_INT16_MIN: i32 = -32768;
pub const PG_INT16_MAX: u32 = 32767;
pub const PG_UINT16_MAX: u32 = 65535;
pub const PG_INT32_MIN: i32 = -2147483648;
pub const PG_INT32_MAX: u32 = 2147483647;
pub const PG_UINT32_MAX: u32 = 4294967295;
pub const FLOAT8PASSBYVAL: u32 = 1;
pub const HIGHBIT: u32 = 128;
pub const ESCAPE_STRING_SYNTAX: u8 = 69u8;
pub const STATUS_OK: u32 = 0;
pub const STATUS_ERROR: i32 = -1;
pub const STATUS_EOF: i32 = -2;
pub const PG_BINARY: u32 = 0;
pub const PG_BINARY_A: &[u8; 2] = b"a\0";
pub const PG_BINARY_R: &[u8; 2] = b"r\0";
pub const PG_BINARY_W: &[u8; 2] = b"w\0";
pub const _CTYPE_H: u32 = 1;
pub const PGINVALID_SOCKET: i32 = -1;
pub const PG_BACKEND_VERSIONSTR: &[u8; 31] = b"postgres (PostgreSQL) 17devel\n\0";
pub const EXE: &[u8; 1] = b"\0";
pub const DEVNULL: &[u8; 10] = b"/dev/null\0";
pub const USE_REPL_SNPRINTF: u32 = 1;
pub const PG_STRERROR_R_BUFLEN: u32 = 256;
pub const PG_IOLBF: u32 = 1;
pub const _MATH_H: u32 = 1;
pub const _BITS_LIBM_SIMD_DECL_STUBS_H: u32 = 1;
pub const __FP_LOGB0_IS_MIN: u32 = 1;
pub const __FP_LOGBNAN_IS_MIN: u32 = 1;
pub const FP_ILOGB0: i32 = -2147483648;
pub const FP_ILOGBNAN: i32 = -2147483648;
pub const __MATH_DECLARING_DOUBLE: u32 = 1;
pub const __MATH_DECLARING_FLOATN: u32 = 0;
pub const __MATH_DECLARE_LDOUBLE: u32 = 1;
pub const FP_NAN: u32 = 0;
pub const FP_INFINITE: u32 = 1;
pub const FP_ZERO: u32 = 2;
pub const FP_SUBNORMAL: u32 = 3;
pub const FP_NORMAL: u32 = 4;
pub const MATH_ERRNO: u32 = 1;
pub const MATH_ERREXCEPT: u32 = 2;
pub const math_errhandling: u32 = 3;
pub const M_E: f64 = 2.718281828459045;
pub const M_LOG2E: f64 = 1.4426950408889634;
pub const M_LOG10E: f64 = 0.4342944819032518;
pub const M_LN2: f64 = 0.6931471805599453;
pub const M_LN10: f64 = 2.302585092994046;
pub const M_PI: f64 = 3.141592653589793;
pub const M_PI_2: f64 = 1.5707963267948966;
pub const M_PI_4: f64 = 0.7853981633974483;
pub const M_1_PI: f64 = 0.3183098861837907;
pub const M_2_PI: f64 = 0.6366197723675814;
pub const M_2_SQRTPI: f64 = 1.1283791670955126;
pub const M_SQRT2: f64 = 1.4142135623730951;
pub const M_SQRT1_2: f64 = 0.7071067811865476;
pub const HAVE_GETRLIMIT: u32 = 1;
pub const HAVE_POLL: u32 = 1;
pub const HAVE_POLL_H: u32 = 1;
pub const HAVE_READLINK: u32 = 1;
pub const HAVE_SETSID: u32 = 1;
pub const HAVE_SHM_OPEN: u32 = 1;
pub const HAVE_SYMLINK: u32 = 1;
pub const _TIME_H: u32 = 1;
pub const _BITS_TIME_H: u32 = 1;
pub const CLOCK_REALTIME: u32 = 0;
pub const CLOCK_MONOTONIC: u32 = 1;
pub const CLOCK_PROCESS_CPUTIME_ID: u32 = 2;
pub const CLOCK_THREAD_CPUTIME_ID: u32 = 3;
pub const CLOCK_MONOTONIC_RAW: u32 = 4;
pub const CLOCK_REALTIME_COARSE: u32 = 5;
pub const CLOCK_MONOTONIC_COARSE: u32 = 6;
pub const CLOCK_BOOTTIME: u32 = 7;
pub const CLOCK_REALTIME_ALARM: u32 = 8;
pub const CLOCK_BOOTTIME_ALARM: u32 = 9;
pub const CLOCK_TAI: u32 = 11;
pub const TIMER_ABSTIME: u32 = 1;
pub const __struct_tm_defined: u32 = 1;
pub const __itimerspec_defined: u32 = 1;
pub const TIME_UTC: u32 = 1;
pub const LIBPQ_HAS_PIPELINING: u32 = 1;
pub const LIBPQ_HAS_TRACE_FLAGS: u32 = 1;
pub const LIBPQ_HAS_SSL_LIBRARY_DETECTION: u32 = 1;
pub const PG_COPYRES_ATTRS: u32 = 1;
pub const PG_COPYRES_TUPLES: u32 = 2;
pub const PG_COPYRES_EVENTS: u32 = 4;
pub const PG_COPYRES_NOTICEHOOKS: u32 = 8;
pub const PQTRACE_SUPPRESS_TIMESTAMPS: u32 = 1;
pub const PQTRACE_REGRESS_MODE: u32 = 2;
pub const PQ_QUERY_PARAM_MAX_LIMIT: u32 = 65535;
pub const PQnoPasswordSupplied: &[u8; 35] = b"fe_sendauth: no password supplied\n\0";
pub const _NETDB_H: u32 = 1;
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const _RPC_NETDB_H: u32 = 1;
pub const _PATH_HEQUIV: &[u8; 17] = b"/etc/hosts.equiv\0";
pub const _PATH_HOSTS: &[u8; 11] = b"/etc/hosts\0";
pub const _PATH_NETWORKS: &[u8; 14] = b"/etc/networks\0";
pub const _PATH_NSSWITCH_CONF: &[u8; 19] = b"/etc/nsswitch.conf\0";
pub const _PATH_PROTOCOLS: &[u8; 15] = b"/etc/protocols\0";
pub const _PATH_SERVICES: &[u8; 14] = b"/etc/services\0";
pub const HOST_NOT_FOUND: u32 = 1;
pub const TRY_AGAIN: u32 = 2;
pub const NO_RECOVERY: u32 = 3;
pub const NO_DATA: u32 = 4;
pub const NETDB_INTERNAL: i32 = -1;
pub const NETDB_SUCCESS: u32 = 0;
pub const NO_ADDRESS: u32 = 4;
pub const IPPORT_RESERVED: u32 = 1024;
pub const AI_PASSIVE: u32 = 1;
pub const AI_CANONNAME: u32 = 2;
pub const AI_NUMERICHOST: u32 = 4;
pub const AI_V4MAPPED: u32 = 8;
pub const AI_ALL: u32 = 16;
pub const AI_ADDRCONFIG: u32 = 32;
pub const AI_NUMERICSERV: u32 = 1024;
pub const EAI_BADFLAGS: i32 = -1;
pub const EAI_NONAME: i32 = -2;
pub const EAI_AGAIN: i32 = -3;
pub const EAI_FAIL: i32 = -4;
pub const EAI_FAMILY: i32 = -6;
pub const EAI_SOCKTYPE: i32 = -7;
pub const EAI_SERVICE: i32 = -8;
pub const EAI_MEMORY: i32 = -10;
pub const EAI_SYSTEM: i32 = -11;
pub const EAI_OVERFLOW: i32 = -12;
pub const NI_MAXHOST: u32 = 1025;
pub const NI_MAXSERV: u32 = 32;
pub const NI_NUMERICHOST: u32 = 1;
pub const NI_NUMERICSERV: u32 = 2;
pub const NI_NOFQDN: u32 = 4;
pub const NI_NAMEREQD: u32 = 8;
pub const NI_DGRAM: u32 = 16;
pub const _SYS_TIME_H: u32 = 1;
pub const _PTHREAD_H: u32 = 1;
pub const _SCHED_H: u32 = 1;
pub const _BITS_SCHED_H: u32 = 1;
pub const SCHED_OTHER: u32 = 0;
pub const SCHED_FIFO: u32 = 1;
pub const SCHED_RR: u32 = 2;
pub const _BITS_TYPES_STRUCT_SCHED_PARAM: u32 = 1;
pub const _BITS_CPU_SET_H: u32 = 1;
pub const __CPU_SETSIZE: u32 = 1024;
pub const _BITS_SETJMP_H: u32 = 1;
pub const __jmp_buf_tag_defined: u32 = 1;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const PTHREAD_ONCE_INIT: u32 = 0;
pub const PTHREAD_BARRIER_SERIAL_THREAD: i32 = -1;
pub const _SYS_UN_H: u32 = 1;
pub const PqMsg_Bind: u8 = 66u8;
pub const PqMsg_Close: u8 = 67u8;
pub const PqMsg_Describe: u8 = 68u8;
pub const PqMsg_Execute: u8 = 69u8;
pub const PqMsg_FunctionCall: u8 = 70u8;
pub const PqMsg_Flush: u8 = 72u8;
pub const PqMsg_Parse: u8 = 80u8;
pub const PqMsg_Query: u8 = 81u8;
pub const PqMsg_Sync: u8 = 83u8;
pub const PqMsg_Terminate: u8 = 88u8;
pub const PqMsg_CopyFail: u8 = 102u8;
pub const PqMsg_GSSResponse: u8 = 112u8;
pub const PqMsg_PasswordMessage: u8 = 112u8;
pub const PqMsg_SASLInitialResponse: u8 = 112u8;
pub const PqMsg_SASLResponse: u8 = 112u8;
pub const PqMsg_ParseComplete: u8 = 49u8;
pub const PqMsg_BindComplete: u8 = 50u8;
pub const PqMsg_CloseComplete: u8 = 51u8;
pub const PqMsg_NotificationResponse: u8 = 65u8;
pub const PqMsg_CommandComplete: u8 = 67u8;
pub const PqMsg_DataRow: u8 = 68u8;
pub const PqMsg_ErrorResponse: u8 = 69u8;
pub const PqMsg_CopyInResponse: u8 = 71u8;
pub const PqMsg_CopyOutResponse: u8 = 72u8;
pub const PqMsg_EmptyQueryResponse: u8 = 73u8;
pub const PqMsg_BackendKeyData: u8 = 75u8;
pub const PqMsg_NoticeResponse: u8 = 78u8;
pub const PqMsg_AuthenticationRequest: u8 = 82u8;
pub const PqMsg_ParameterStatus: u8 = 83u8;
pub const PqMsg_RowDescription: u8 = 84u8;
pub const PqMsg_FunctionCallResponse: u8 = 86u8;
pub const PqMsg_CopyBothResponse: u8 = 87u8;
pub const PqMsg_ReadyForQuery: u8 = 90u8;
pub const PqMsg_NoData: u8 = 110u8;
pub const PqMsg_PortalSuspended: u8 = 115u8;
pub const PqMsg_ParameterDescription: u8 = 116u8;
pub const PqMsg_NegotiateProtocolVersion: u8 = 118u8;
pub const PqMsg_CopyDone: u8 = 99u8;
pub const PqMsg_CopyData: u8 = 100u8;
pub const AUTH_REQ_OK: u32 = 0;
pub const AUTH_REQ_KRB4: u32 = 1;
pub const AUTH_REQ_KRB5: u32 = 2;
pub const AUTH_REQ_PASSWORD: u32 = 3;
pub const AUTH_REQ_CRYPT: u32 = 4;
pub const AUTH_REQ_MD5: u32 = 5;
pub const AUTH_REQ_GSS: u32 = 7;
pub const AUTH_REQ_GSS_CONT: u32 = 8;
pub const AUTH_REQ_SSPI: u32 = 9;
pub const AUTH_REQ_SASL: u32 = 10;
pub const AUTH_REQ_SASL_CONT: u32 = 11;
pub const AUTH_REQ_SASL_FIN: u32 = 12;
pub const AUTH_REQ_MAX: u32 = 12;
pub const MAX_STARTUP_PACKET_LENGTH: u32 = 10000;
pub const PG_ALPN_PROTOCOL: &[u8; 10] = b"TBD-pgsql\0";
pub const INITIAL_EXPBUFFER_SIZE: u32 = 256;
pub const CMDSTATUS_LEN: u32 = 64;
pub const NULL_LEN: i32 = -1;
pub const ENC_ERROR: u32 = 0;
pub const ENC_PLAINTEXT: u32 = 1;
pub const ENC_GSSAPI: u32 = 2;
pub const ENC_DIRECT_SSL: u32 = 4;
pub const ENC_NEGOTIATED_SSL: u32 = 8;
pub const OUTBUFFER_THRESHOLD: u32 = 65536;
pub type Oid = libc::c_uint;
pub type pg_int64 = libc::c_long;
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
pub type __u_char = libc::c_uchar;
pub type __u_short = libc::c_ushort;
pub type __u_int = libc::c_uint;
pub type __u_long = libc::c_ulong;
pub type __int8_t = libc::c_schar;
pub type __uint8_t = libc::c_uchar;
pub type __int16_t = libc::c_short;
pub type __uint16_t = libc::c_ushort;
pub type __int32_t = libc::c_int;
pub type __uint32_t = libc::c_uint;
pub type __int64_t = libc::c_long;
pub type __uint64_t = libc::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = libc::c_long;
pub type __u_quad_t = libc::c_ulong;
pub type __intmax_t = libc::c_long;
pub type __uintmax_t = libc::c_ulong;
pub type __dev_t = libc::c_ulong;
pub type __uid_t = libc::c_uint;
pub type __gid_t = libc::c_uint;
pub type __ino_t = libc::c_ulong;
pub type __ino64_t = libc::c_ulong;
pub type __mode_t = libc::c_uint;
pub type __nlink_t = libc::c_ulong;
pub type __off_t = libc::c_long;
pub type __off64_t = libc::c_long;
pub type __pid_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [libc::c_int; 2usize],
}
pub type __clock_t = libc::c_long;
pub type __rlim_t = libc::c_ulong;
pub type __rlim64_t = libc::c_ulong;
pub type __id_t = libc::c_uint;
pub type __time_t = libc::c_long;
pub type __useconds_t = libc::c_uint;
pub type __suseconds_t = libc::c_long;
pub type __suseconds64_t = libc::c_long;
pub type __daddr_t = libc::c_int;
pub type __key_t = libc::c_int;
pub type __clockid_t = libc::c_int;
pub type __timer_t = *mut libc::c_void;
pub type __blksize_t = libc::c_long;
pub type __blkcnt_t = libc::c_long;
pub type __blkcnt64_t = libc::c_long;
pub type __fsblkcnt_t = libc::c_ulong;
pub type __fsblkcnt64_t = libc::c_ulong;
pub type __fsfilcnt_t = libc::c_ulong;
pub type __fsfilcnt64_t = libc::c_ulong;
pub type __fsword_t = libc::c_long;
pub type __ssize_t = libc::c_long;
pub type __syscall_slong_t = libc::c_long;
pub type __syscall_ulong_t = libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut libc::c_char;
pub type __intptr_t = libc::c_long;
pub type __socklen_t = libc::c_uint;
pub type __sig_atomic_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: libc::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: libc::c_uint,
    pub __wchb: [libc::c_char; 4usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = libc::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: libc::c_int,
    pub _IO_read_ptr: *mut libc::c_char,
    pub _IO_read_end: *mut libc::c_char,
    pub _IO_read_base: *mut libc::c_char,
    pub _IO_write_base: *mut libc::c_char,
    pub _IO_write_ptr: *mut libc::c_char,
    pub _IO_write_end: *mut libc::c_char,
    pub _IO_buf_base: *mut libc::c_char,
    pub _IO_buf_end: *mut libc::c_char,
    pub _IO_save_base: *mut libc::c_char,
    pub _IO_backup_base: *mut libc::c_char,
    pub _IO_save_end: *mut libc::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: libc::c_int,
    pub _flags2: libc::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: libc::c_ushort,
    pub _vtable_offset: libc::c_schar,
    pub _shortbuf: [libc::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut libc::c_void,
    pub __pad5: usize,
    pub _mode: libc::c_int,
    pub _unused2: [libc::c_char; 20usize],
}
pub type off_t = __off_t;
pub type fpos_t = __fpos_t;
extern "C" {
    pub static mut stdin: *mut FILE;
}
extern "C" {
    pub static mut stdout: *mut FILE;
}
extern "C" {
    pub static mut stderr: *mut FILE;
}
extern "C" {
    pub fn remove(__filename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn rename(__old: *const libc::c_char, __new: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn renameat(
        __oldfd: libc::c_int,
        __old: *const libc::c_char,
        __newfd: libc::c_int,
        __new: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fclose(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
extern "C" {
    pub fn tmpnam(arg1: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn tmpnam_r(__s: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn tempnam(__dir: *const libc::c_char, __pfx: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn fflush(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fopen(__filename: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn freopen(
        __filename: *const libc::c_char,
        __modes: *const libc::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
extern "C" {
    pub fn fdopen(__fd: libc::c_int, __modes: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn fmemopen(
        __s: *mut libc::c_void,
        __len: usize,
        __modes: *const libc::c_char,
    ) -> *mut FILE;
}
extern "C" {
    pub fn open_memstream(__bufloc: *mut *mut libc::c_char, __sizeloc: *mut usize) -> *mut FILE;
}
extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut libc::c_char);
}
extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut libc::c_char,
        __modes: libc::c_int,
        __n: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut libc::c_char, __size: usize);
}
extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
extern "C" {
    pub fn fprintf(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn printf(__format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn sprintf(__s: *mut libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vprintf(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vsprintf(
        __s: *mut libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn snprintf(
        __s: *mut libc::c_char,
        __maxlen: libc::c_ulong,
        __format: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn vsnprintf(
        __s: *mut libc::c_char,
        __maxlen: libc::c_ulong,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vdprintf(
        __fd: libc::c_int,
        __fmt: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn dprintf(__fd: libc::c_int, __fmt: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn fscanf(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn scanf(__format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn sscanf(__s: *const libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(__stream: *mut FILE, __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(__s: *const libc::c_char, __format: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn vscanf(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn vsscanf(
        __s: *const libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(__format: *const libc::c_char, __arg: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const libc::c_char,
        __format: *const libc::c_char,
        __arg: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getc(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar() -> libc::c_int;
}
extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn getchar_unlocked() -> libc::c_int;
}
extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fputc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn fputc_unlocked(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putc_unlocked(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putchar_unlocked(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn getw(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn putw(__w: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fgets(
        __s: *mut libc::c_char,
        __n: libc::c_int,
        __stream: *mut FILE,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __delimiter: libc::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn getline(
        __lineptr: *mut *mut libc::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
extern "C" {
    pub fn fputs(__s: *const libc::c_char, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn puts(__s: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn ungetc(__c: libc::c_int, __stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fread(
        __ptr: *mut libc::c_void,
        __size: libc::c_ulong,
        __n: libc::c_ulong,
        __stream: *mut FILE,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn fwrite(
        __ptr: *const libc::c_void,
        __size: libc::c_ulong,
        __n: libc::c_ulong,
        __s: *mut FILE,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const libc::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
extern "C" {
    pub fn fseek(__stream: *mut FILE, __off: libc::c_long, __whence: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ftell(__stream: *mut FILE) -> libc::c_long;
}
extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
extern "C" {
    pub fn fseeko(__stream: *mut FILE, __off: __off_t, __whence: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> libc::c_int;
}
extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
extern "C" {
    pub fn feof(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn ferror(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn perror(__s: *const libc::c_char);
}
extern "C" {
    pub fn fileno(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn pclose(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn popen(__command: *const libc::c_char, __modes: *const libc::c_char) -> *mut FILE;
}
extern "C" {
    pub fn ctermid(__s: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: libc::c_int) -> libc::c_int;
}
pub type wchar_t = libc::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: libc::c_int,
    pub rem: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: libc::c_long,
    pub rem: libc::c_long,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: libc::c_longlong,
    pub rem: libc::c_longlong,
}
extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
extern "C" {
    pub fn atof(__nptr: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn atoi(__nptr: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn atol(__nptr: *const libc::c_char) -> libc::c_long;
}
extern "C" {
    pub fn atoll(__nptr: *const libc::c_char) -> libc::c_longlong;
}
extern "C" {
    pub fn strtod(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f64;
}
extern "C" {
    pub fn strtof(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> f32;
}
extern "C" {
    pub fn strtold(__nptr: *const libc::c_char, __endptr: *mut *mut libc::c_char) -> u128;
}
extern "C" {
    pub fn strtol(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_long;
}
extern "C" {
    pub fn strtoul(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulong;
}
extern "C" {
    pub fn strtoq(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtouq(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn strtoll(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_longlong;
}
extern "C" {
    pub fn strtoull(
        __nptr: *const libc::c_char,
        __endptr: *mut *mut libc::c_char,
        __base: libc::c_int,
    ) -> libc::c_ulonglong;
}
extern "C" {
    pub fn l64a(__n: libc::c_long) -> *mut libc::c_char;
}
extern "C" {
    pub fn a64l(__s: *const libc::c_char) -> libc::c_long;
}
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = libc::c_ulong;
pub type ushort = libc::c_ushort;
pub type uint = libc::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [libc::c_ulong; 16usize],
}
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = libc::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
pub type fd_mask = __fd_mask;
extern "C" {
    pub fn select(
        __nfds: libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pselect(
        __nfds: libc::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> libc::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: libc::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: libc::c_uint,
    pub __high: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: libc::c_int,
    pub __count: libc::c_uint,
    pub __owner: libc::c_int,
    pub __nusers: libc::c_uint,
    pub __kind: libc::c_int,
    pub __spins: libc::c_short,
    pub __elision: libc::c_short,
    pub __list: __pthread_list_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: libc::c_uint,
    pub __writers: libc::c_uint,
    pub __wrphase_futex: libc::c_uint,
    pub __writers_futex: libc::c_uint,
    pub __pad3: libc::c_uint,
    pub __pad4: libc::c_uint,
    pub __cur_writer: libc::c_int,
    pub __shared: libc::c_int,
    pub __rwelision: libc::c_schar,
    pub __pad1: [libc::c_uchar; 7usize],
    pub __pad2: libc::c_ulong,
    pub __flags: libc::c_uint,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [libc::c_uint; 2usize],
    pub __g_size: [libc::c_uint; 2usize],
    pub __g1_orig_size: libc::c_uint,
    pub __wrefs: libc::c_uint,
    pub __g_signals: [libc::c_uint; 2usize],
}
pub type __tss_t = libc::c_uint;
pub type __thrd_t = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: libc::c_int,
}
pub type pthread_t = libc::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
pub type pthread_key_t = libc::c_uint;
pub type pthread_once_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [libc::c_char; 56usize],
    pub __align: libc::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [libc::c_char; 40usize],
    pub __align: libc::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [libc::c_char; 48usize],
    pub __align: libc::c_longlong,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [libc::c_char; 56usize],
    pub __align: libc::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [libc::c_char; 8usize],
    pub __align: libc::c_long,
}
pub type pthread_spinlock_t = libc::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [libc::c_char; 32usize],
    pub __align: libc::c_long,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [libc::c_char; 4usize],
    pub __align: libc::c_int,
}
extern "C" {
    pub fn random() -> libc::c_long;
}
extern "C" {
    pub fn srandom(__seed: libc::c_uint);
}
extern "C" {
    pub fn initstate(
        __seed: libc::c_uint,
        __statebuf: *mut libc::c_char,
        __statelen: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn setstate(__statebuf: *mut libc::c_char) -> *mut libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: libc::c_int,
    pub rand_deg: libc::c_int,
    pub rand_sep: libc::c_int,
    pub end_ptr: *mut i32,
}
extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> libc::c_int;
}
extern "C" {
    pub fn srandom_r(__seed: libc::c_uint, __buf: *mut random_data) -> libc::c_int;
}
extern "C" {
    pub fn initstate_r(
        __seed: libc::c_uint,
        __statebuf: *mut libc::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> libc::c_int;
}
extern "C" {
    pub fn setstate_r(__statebuf: *mut libc::c_char, __buf: *mut random_data) -> libc::c_int;
}
extern "C" {
    pub fn rand() -> libc::c_int;
}
extern "C" {
    pub fn srand(__seed: libc::c_uint);
}
extern "C" {
    pub fn rand_r(__seed: *mut libc::c_uint) -> libc::c_int;
}
extern "C" {
    pub fn drand48() -> f64;
}
extern "C" {
    pub fn erand48(__xsubi: *mut libc::c_ushort) -> f64;
}
extern "C" {
    pub fn lrand48() -> libc::c_long;
}
extern "C" {
    pub fn nrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
}
extern "C" {
    pub fn mrand48() -> libc::c_long;
}
extern "C" {
    pub fn jrand48(__xsubi: *mut libc::c_ushort) -> libc::c_long;
}
extern "C" {
    pub fn srand48(__seedval: libc::c_long);
}
extern "C" {
    pub fn seed48(__seed16v: *mut libc::c_ushort) -> *mut libc::c_ushort;
}
extern "C" {
    pub fn lcong48(__param: *mut libc::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [libc::c_ushort; 3usize],
    pub __old_x: [libc::c_ushort; 3usize],
    pub __c: libc::c_ushort,
    pub __init: libc::c_ushort,
    pub __a: libc::c_ulonglong,
}
extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> libc::c_int;
}
extern "C" {
    pub fn erand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn lrand48_r(__buffer: *mut drand48_data, __result: *mut libc::c_long) -> libc::c_int;
}
extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut libc::c_long,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mrand48_r(__buffer: *mut drand48_data, __result: *mut libc::c_long) -> libc::c_int;
}
extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut libc::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut libc::c_long,
    ) -> libc::c_int;
}
extern "C" {
    pub fn srand48_r(__seedval: libc::c_long, __buffer: *mut drand48_data) -> libc::c_int;
}
extern "C" {
    pub fn seed48_r(__seed16v: *mut libc::c_ushort, __buffer: *mut drand48_data) -> libc::c_int;
}
extern "C" {
    pub fn lcong48_r(__param: *mut libc::c_ushort, __buffer: *mut drand48_data) -> libc::c_int;
}
extern "C" {
    pub fn malloc(__size: libc::c_ulong) -> *mut libc::c_void;
}
extern "C" {
    pub fn calloc(__nmemb: libc::c_ulong, __size: libc::c_ulong) -> *mut libc::c_void;
}
extern "C" {
    pub fn realloc(__ptr: *mut libc::c_void, __size: libc::c_ulong) -> *mut libc::c_void;
}
extern "C" {
    pub fn free(__ptr: *mut libc::c_void);
}
extern "C" {
    pub fn reallocarray(
        __ptr: *mut libc::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn alloca(__size: libc::c_ulong) -> *mut libc::c_void;
}
extern "C" {
    pub fn valloc(__size: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut libc::c_void,
        __alignment: usize,
        __size: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn aligned_alloc(__alignment: libc::c_ulong, __size: libc::c_ulong) -> *mut libc::c_void;
}
extern "C" {
    pub fn abort() -> !;
}
extern "C" {
    pub fn atexit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn at_quick_exit(__func: ::core::option::Option<unsafe extern "C" fn()>) -> libc::c_int;
}
extern "C" {
    pub fn on_exit(
        __func: ::core::option::Option<
            unsafe extern "C" fn(__status: libc::c_int, __arg: *mut libc::c_void),
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn exit(__status: libc::c_int) -> !;
}
extern "C" {
    pub fn quick_exit(__status: libc::c_int) -> !;
}
extern "C" {
    pub fn _Exit(__status: libc::c_int) -> !;
}
extern "C" {
    pub fn getenv(__name: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn putenv(__string: *mut libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn setenv(
        __name: *const libc::c_char,
        __value: *const libc::c_char,
        __replace: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn unsetenv(__name: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn clearenv() -> libc::c_int;
}
extern "C" {
    pub fn mktemp(__template: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn mkstemp(__template: *mut libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn mkstemps(__template: *mut libc::c_char, __suffixlen: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn mkdtemp(__template: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn system(__command: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn realpath(
        __name: *const libc::c_char,
        __resolved: *mut libc::c_char,
    ) -> *mut libc::c_char;
}
pub type __compar_fn_t = ::core::option::Option<
    unsafe extern "C" fn(arg1: *const libc::c_void, arg2: *const libc::c_void) -> libc::c_int,
>;
extern "C" {
    pub fn bsearch(
        __key: *const libc::c_void,
        __base: *const libc::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn qsort(__base: *mut libc::c_void, __nmemb: usize, __size: usize, __compar: __compar_fn_t);
}
extern "C" {
    pub fn abs(__x: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn labs(__x: libc::c_long) -> libc::c_long;
}
extern "C" {
    pub fn llabs(__x: libc::c_longlong) -> libc::c_longlong;
}
extern "C" {
    pub fn div(__numer: libc::c_int, __denom: libc::c_int) -> div_t;
}
extern "C" {
    pub fn ldiv(__numer: libc::c_long, __denom: libc::c_long) -> ldiv_t;
}
extern "C" {
    pub fn lldiv(__numer: libc::c_longlong, __denom: libc::c_longlong) -> lldiv_t;
}
extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn gcvt(__value: f64, __ndigit: libc::c_int, __buf: *mut libc::c_char)
        -> *mut libc::c_char;
}
extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: libc::c_int,
        __buf: *mut libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: libc::c_int,
        __decpt: *mut libc::c_int,
        __sign: *mut libc::c_int,
        __buf: *mut libc::c_char,
        __len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn mblen(__s: *const libc::c_char, __n: usize) -> libc::c_int;
}
extern "C" {
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const libc::c_char, __n: usize) -> libc::c_int;
}
extern "C" {
    pub fn wctomb(__s: *mut libc::c_char, __wchar: wchar_t) -> libc::c_int;
}
extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const libc::c_char, __n: usize) -> usize;
}
extern "C" {
    pub fn wcstombs(__s: *mut libc::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
extern "C" {
    pub fn rpmatch(__response: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut libc::c_char,
        __tokens: *const *mut libc::c_char,
        __valuep: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: libc::c_int) -> libc::c_int;
}
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigval {
    pub sival_int: libc::c_int,
    pub sival_ptr: *mut libc::c_void,
}
pub type __sigval_t = sigval;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t {
    pub si_signo: libc::c_int,
    pub si_errno: libc::c_int,
    pub si_code: libc::c_int,
    pub __pad0: libc::c_int,
    pub _sifields: siginfo_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1 {
    pub _pad: [libc::c_int; 28usize],
    pub _kill: siginfo_t__bindgen_ty_1__bindgen_ty_1,
    pub _timer: siginfo_t__bindgen_ty_1__bindgen_ty_2,
    pub _rt: siginfo_t__bindgen_ty_1__bindgen_ty_3,
    pub _sigchld: siginfo_t__bindgen_ty_1__bindgen_ty_4,
    pub _sigfault: siginfo_t__bindgen_ty_1__bindgen_ty_5,
    pub _sigpoll: siginfo_t__bindgen_ty_1__bindgen_ty_6,
    pub _sigsys: siginfo_t__bindgen_ty_1__bindgen_ty_7,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_1 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_2 {
    pub si_tid: libc::c_int,
    pub si_overrun: libc::c_int,
    pub si_sigval: __sigval_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_3 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: __sigval_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_4 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: libc::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5 {
    pub si_addr: *mut libc::c_void,
    pub si_addr_lsb: libc::c_short,
    pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1 {
    pub _addr_bnd: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1,
    pub _pkey: __uint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1__bindgen_ty_1 {
    pub _lower: *mut libc::c_void,
    pub _upper: *mut libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_6 {
    pub si_band: libc::c_long,
    pub si_fd: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct siginfo_t__bindgen_ty_1__bindgen_ty_7 {
    pub _call_addr: *mut libc::c_void,
    pub _syscall: libc::c_int,
    pub _arch: libc::c_uint,
}
pub const SI_ASYNCNL: _bindgen_ty_1 = -60;
pub const SI_DETHREAD: _bindgen_ty_1 = -7;
pub const SI_TKILL: _bindgen_ty_1 = -6;
pub const SI_SIGIO: _bindgen_ty_1 = -5;
pub const SI_ASYNCIO: _bindgen_ty_1 = -4;
pub const SI_MESGQ: _bindgen_ty_1 = -3;
pub const SI_TIMER: _bindgen_ty_1 = -2;
pub const SI_QUEUE: _bindgen_ty_1 = -1;
pub const SI_USER: _bindgen_ty_1 = 0;
pub const SI_KERNEL: _bindgen_ty_1 = 128;
pub type _bindgen_ty_1 = libc::c_int;
pub const ILL_ILLOPC: _bindgen_ty_2 = 1;
pub const ILL_ILLOPN: _bindgen_ty_2 = 2;
pub const ILL_ILLADR: _bindgen_ty_2 = 3;
pub const ILL_ILLTRP: _bindgen_ty_2 = 4;
pub const ILL_PRVOPC: _bindgen_ty_2 = 5;
pub const ILL_PRVREG: _bindgen_ty_2 = 6;
pub const ILL_COPROC: _bindgen_ty_2 = 7;
pub const ILL_BADSTK: _bindgen_ty_2 = 8;
pub const ILL_BADIADDR: _bindgen_ty_2 = 9;
pub type _bindgen_ty_2 = libc::c_uint;
pub const FPE_INTDIV: _bindgen_ty_3 = 1;
pub const FPE_INTOVF: _bindgen_ty_3 = 2;
pub const FPE_FLTDIV: _bindgen_ty_3 = 3;
pub const FPE_FLTOVF: _bindgen_ty_3 = 4;
pub const FPE_FLTUND: _bindgen_ty_3 = 5;
pub const FPE_FLTRES: _bindgen_ty_3 = 6;
pub const FPE_FLTINV: _bindgen_ty_3 = 7;
pub const FPE_FLTSUB: _bindgen_ty_3 = 8;
pub const FPE_FLTUNK: _bindgen_ty_3 = 14;
pub const FPE_CONDTRAP: _bindgen_ty_3 = 15;
pub type _bindgen_ty_3 = libc::c_uint;
pub const SEGV_MAPERR: _bindgen_ty_4 = 1;
pub const SEGV_ACCERR: _bindgen_ty_4 = 2;
pub const SEGV_BNDERR: _bindgen_ty_4 = 3;
pub const SEGV_PKUERR: _bindgen_ty_4 = 4;
pub const SEGV_ACCADI: _bindgen_ty_4 = 5;
pub const SEGV_ADIDERR: _bindgen_ty_4 = 6;
pub const SEGV_ADIPERR: _bindgen_ty_4 = 7;
pub const SEGV_MTEAERR: _bindgen_ty_4 = 8;
pub const SEGV_MTESERR: _bindgen_ty_4 = 9;
pub type _bindgen_ty_4 = libc::c_uint;
pub const BUS_ADRALN: _bindgen_ty_5 = 1;
pub const BUS_ADRERR: _bindgen_ty_5 = 2;
pub const BUS_OBJERR: _bindgen_ty_5 = 3;
pub const BUS_MCEERR_AR: _bindgen_ty_5 = 4;
pub const BUS_MCEERR_AO: _bindgen_ty_5 = 5;
pub type _bindgen_ty_5 = libc::c_uint;
pub const CLD_EXITED: _bindgen_ty_6 = 1;
pub const CLD_KILLED: _bindgen_ty_6 = 2;
pub const CLD_DUMPED: _bindgen_ty_6 = 3;
pub const CLD_TRAPPED: _bindgen_ty_6 = 4;
pub const CLD_STOPPED: _bindgen_ty_6 = 5;
pub const CLD_CONTINUED: _bindgen_ty_6 = 6;
pub type _bindgen_ty_6 = libc::c_uint;
pub const POLL_IN: _bindgen_ty_7 = 1;
pub const POLL_OUT: _bindgen_ty_7 = 2;
pub const POLL_MSG: _bindgen_ty_7 = 3;
pub const POLL_ERR: _bindgen_ty_7 = 4;
pub const POLL_PRI: _bindgen_ty_7 = 5;
pub const POLL_HUP: _bindgen_ty_7 = 6;
pub type _bindgen_ty_7 = libc::c_uint;
pub type sigval_t = __sigval_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigevent {
    pub sigev_value: __sigval_t,
    pub sigev_signo: libc::c_int,
    pub sigev_notify: libc::c_int,
    pub _sigev_un: sigevent__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigevent__bindgen_ty_1 {
    pub _pad: [libc::c_int; 12usize],
    pub _tid: __pid_t,
    pub _sigev_thread: sigevent__bindgen_ty_1__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigevent__bindgen_ty_1__bindgen_ty_1 {
    pub _function: ::core::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
    pub _attribute: *mut pthread_attr_t,
}
pub type sigevent_t = sigevent;
pub const SIGEV_SIGNAL: _bindgen_ty_8 = 0;
pub const SIGEV_NONE: _bindgen_ty_8 = 1;
pub const SIGEV_THREAD: _bindgen_ty_8 = 2;
pub const SIGEV_THREAD_ID: _bindgen_ty_8 = 4;
pub type _bindgen_ty_8 = libc::c_uint;
pub type __sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int)>;
extern "C" {
    pub fn __sysv_signal(__sig: libc::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn signal(__sig: libc::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn kill(__pid: __pid_t, __sig: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn killpg(__pgrp: __pid_t, __sig: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn raise(__sig: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ssignal(__sig: libc::c_int, __handler: __sighandler_t) -> __sighandler_t;
}
extern "C" {
    pub fn gsignal(__sig: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn psignal(__sig: libc::c_int, __s: *const libc::c_char);
}
extern "C" {
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const libc::c_char);
}
extern "C" {
    pub fn sigblock(__mask: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigsetmask(__mask: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn siggetmask() -> libc::c_int;
}
pub type sig_t = __sighandler_t;
extern "C" {
    pub fn sigemptyset(__set: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigfillset(__set: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigaddset(__set: *mut sigset_t, __signo: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigdelset(__set: *mut sigset_t, __signo: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigismember(__set: *const sigset_t, __signo: libc::c_int) -> libc::c_int;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigaction {
    pub __sigaction_handler: sigaction__bindgen_ty_1,
    pub sa_mask: __sigset_t,
    pub sa_flags: libc::c_int,
    pub sa_restorer: ::core::option::Option<unsafe extern "C" fn()>,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigaction__bindgen_ty_1 {
    pub sa_handler: __sighandler_t,
    pub sa_sigaction: ::core::option::Option<
        unsafe extern "C" fn(arg1: libc::c_int, arg2: *mut siginfo_t, arg3: *mut libc::c_void),
    >,
}
extern "C" {
    pub fn sigprocmask(
        __how: libc::c_int,
        __set: *const sigset_t,
        __oset: *mut sigset_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sigsuspend(__set: *const sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigaction(
        __sig: libc::c_int,
        __act: *const sigaction,
        __oact: *mut sigaction,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sigpending(__set: *mut sigset_t) -> libc::c_int;
}
extern "C" {
    pub fn sigwait(__set: *const sigset_t, __sig: *mut libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t) -> libc::c_int;
}
extern "C" {
    pub fn sigtimedwait(
        __set: *const sigset_t,
        __info: *mut siginfo_t,
        __timeout: *const timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sigqueue(__pid: __pid_t, __sig: libc::c_int, __val: sigval) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpx_sw_bytes {
    pub magic1: __uint32_t,
    pub extended_size: __uint32_t,
    pub xstate_bv: __uint64_t,
    pub xstate_size: __uint32_t,
    pub __glibc_reserved1: [__uint32_t; 7usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpreg {
    pub significand: [libc::c_ushort; 4usize],
    pub exponent: libc::c_ushort,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpxreg {
    pub significand: [libc::c_ushort; 4usize],
    pub exponent: libc::c_ushort,
    pub __glibc_reserved1: [libc::c_ushort; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_fpxreg; 8usize],
    pub _xmm: [_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sigcontext {
    pub r8: __uint64_t,
    pub r9: __uint64_t,
    pub r10: __uint64_t,
    pub r11: __uint64_t,
    pub r12: __uint64_t,
    pub r13: __uint64_t,
    pub r14: __uint64_t,
    pub r15: __uint64_t,
    pub rdi: __uint64_t,
    pub rsi: __uint64_t,
    pub rbp: __uint64_t,
    pub rbx: __uint64_t,
    pub rdx: __uint64_t,
    pub rax: __uint64_t,
    pub rcx: __uint64_t,
    pub rsp: __uint64_t,
    pub rip: __uint64_t,
    pub eflags: __uint64_t,
    pub cs: libc::c_ushort,
    pub gs: libc::c_ushort,
    pub fs: libc::c_ushort,
    pub __pad0: libc::c_ushort,
    pub err: __uint64_t,
    pub trapno: __uint64_t,
    pub oldmask: __uint64_t,
    pub cr2: __uint64_t,
    pub __bindgen_anon_1: sigcontext__bindgen_ty_1,
    pub __reserved1: [__uint64_t; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union sigcontext__bindgen_ty_1 {
    pub fpstate: *mut _fpstate,
    pub __fpstate_word: __uint64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xsave_hdr {
    pub xstate_bv: __uint64_t,
    pub __glibc_reserved1: [__uint64_t; 2usize],
    pub __glibc_reserved2: [__uint64_t; 5usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ymmh_state {
    pub ymmh_space: [__uint32_t; 64usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _xstate {
    pub fpstate: _fpstate,
    pub xstate_hdr: _xsave_hdr,
    pub ymmh: _ymmh_state,
}
extern "C" {
    pub fn sigreturn(__scp: *mut sigcontext) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct stack_t {
    pub ss_sp: *mut libc::c_void,
    pub ss_flags: libc::c_int,
    pub ss_size: usize,
}
pub type greg_t = libc::c_longlong;
pub type gregset_t = [greg_t; 23usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpxreg {
    pub significand: [libc::c_ushort; 4usize],
    pub exponent: libc::c_ushort,
    pub __glibc_reserved1: [libc::c_ushort; 3usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_xmmreg {
    pub element: [__uint32_t; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _libc_fpstate {
    pub cwd: __uint16_t,
    pub swd: __uint16_t,
    pub ftw: __uint16_t,
    pub fop: __uint16_t,
    pub rip: __uint64_t,
    pub rdp: __uint64_t,
    pub mxcsr: __uint32_t,
    pub mxcr_mask: __uint32_t,
    pub _st: [_libc_fpxreg; 8usize],
    pub _xmm: [_libc_xmmreg; 16usize],
    pub __glibc_reserved1: [__uint32_t; 24usize],
}
pub type fpregset_t = *mut _libc_fpstate;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct mcontext_t {
    pub gregs: gregset_t,
    pub fpregs: fpregset_t,
    pub __reserved1: [libc::c_ulonglong; 8usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ucontext_t {
    pub uc_flags: libc::c_ulong,
    pub uc_link: *mut ucontext_t,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: sigset_t,
    pub __fpregs_mem: _libc_fpstate,
    pub __ssp: [libc::c_ulonglong; 4usize],
}
extern "C" {
    pub fn siginterrupt(__sig: libc::c_int, __interrupt: libc::c_int) -> libc::c_int;
}
pub const SS_ONSTACK: _bindgen_ty_9 = 1;
pub const SS_DISABLE: _bindgen_ty_9 = 2;
pub type _bindgen_ty_9 = libc::c_uint;
extern "C" {
    pub fn sigaltstack(__ss: *const stack_t, __oss: *mut stack_t) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sigstack {
    pub ss_sp: *mut libc::c_void,
    pub ss_onstack: libc::c_int,
}
extern "C" {
    pub fn sigstack(__ss: *mut sigstack, __oss: *mut sigstack) -> libc::c_int;
}
extern "C" {
    pub fn pthread_sigmask(
        __how: libc::c_int,
        __newmask: *const __sigset_t,
        __oldmask: *mut __sigset_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_kill(__threadid: pthread_t, __signo: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmin() -> libc::c_int;
}
extern "C" {
    pub fn __libc_current_sigrtmax() -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringInfoData {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PromptInterruptContext {
    pub jmpbuf: *mut libc::c_void,
    pub enabled: *mut sig_atomic_t,
    pub canceled: bool,
}
extern "C" {
    pub fn pg_str_endswith(str_: *const libc::c_char, end: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn strtoint(
        str_: *const libc::c_char,
        endptr: *mut *mut libc::c_char,
        base: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_clean_ascii(str_: *const libc::c_char, alloc_flags: libc::c_int)
        -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_strip_crlf(str_: *mut libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pg_is_ascii(str_: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn pg_get_line(
        stream: *mut FILE,
        prompt_ctx: *mut PromptInterruptContext,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_get_line_buf(stream: *mut FILE, buf: *mut StringInfoData) -> bool;
}
extern "C" {
    pub fn pg_get_line_append(
        stream: *mut FILE,
        buf: *mut StringInfoData,
        prompt_ctx: *mut PromptInterruptContext,
    ) -> bool;
}
extern "C" {
    pub fn simple_prompt(prompt: *const libc::c_char, echo: bool) -> *mut libc::c_char;
}
extern "C" {
    pub fn simple_prompt_extended(
        prompt: *const libc::c_char,
        echo: bool,
        prompt_ctx: *mut PromptInterruptContext,
    ) -> *mut libc::c_char;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: libc::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
extern "C" {
    pub fn bcmp(
        __s1: *const libc::c_void,
        __s2: *const libc::c_void,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
extern "C" {
    pub fn bcopy(__src: *const libc::c_void, __dest: *mut libc::c_void, __n: usize);
}
extern "C" {
    pub fn bzero(__s: *mut libc::c_void, __n: libc::c_ulong);
}
extern "C" {
    pub fn index(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn rindex(__s: *const libc::c_char, __c: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn ffs(__i: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ffsl(__l: libc::c_long) -> libc::c_int;
}
extern "C" {
    pub fn ffsll(__ll: libc::c_longlong) -> libc::c_int;
}
extern "C" {
    pub fn strcasecmp(__s1: *const libc::c_char, __s2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn strncasecmp(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __n: libc::c_ulong,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const libc::c_ushort,
    pub __ctype_tolower: *const libc::c_int,
    pub __ctype_toupper: *const libc::c_int,
    pub __names: [*const libc::c_char; 13usize],
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
extern "C" {
    pub fn strcasecmp_l(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __loc: locale_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn strncasecmp_l(
        __s1: *const libc::c_char,
        __s2: *const libc::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> libc::c_int;
}
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = libc::c_schar;
pub type int_fast16_t = libc::c_long;
pub type int_fast32_t = libc::c_long;
pub type int_fast64_t = libc::c_long;
pub type uint_fast8_t = libc::c_uchar;
pub type uint_fast16_t = libc::c_ulong;
pub type uint_fast32_t = libc::c_ulong;
pub type uint_fast64_t = libc::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
extern "C" {
    pub fn __errno_location() -> *mut libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lconv {
    pub decimal_point: *mut libc::c_char,
    pub thousands_sep: *mut libc::c_char,
    pub grouping: *mut libc::c_char,
    pub int_curr_symbol: *mut libc::c_char,
    pub currency_symbol: *mut libc::c_char,
    pub mon_decimal_point: *mut libc::c_char,
    pub mon_thousands_sep: *mut libc::c_char,
    pub mon_grouping: *mut libc::c_char,
    pub positive_sign: *mut libc::c_char,
    pub negative_sign: *mut libc::c_char,
    pub int_frac_digits: libc::c_char,
    pub frac_digits: libc::c_char,
    pub p_cs_precedes: libc::c_char,
    pub p_sep_by_space: libc::c_char,
    pub n_cs_precedes: libc::c_char,
    pub n_sep_by_space: libc::c_char,
    pub p_sign_posn: libc::c_char,
    pub n_sign_posn: libc::c_char,
    pub int_p_cs_precedes: libc::c_char,
    pub int_p_sep_by_space: libc::c_char,
    pub int_n_cs_precedes: libc::c_char,
    pub int_n_sep_by_space: libc::c_char,
    pub int_p_sign_posn: libc::c_char,
    pub int_n_sign_posn: libc::c_char,
}
extern "C" {
    pub fn setlocale(__category: libc::c_int, __locale: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn localeconv() -> *mut lconv;
}
extern "C" {
    pub fn newlocale(
        __category_mask: libc::c_int,
        __locale: *const libc::c_char,
        __base: locale_t,
    ) -> locale_t;
}
extern "C" {
    pub fn duplocale(__dataset: locale_t) -> locale_t;
}
extern "C" {
    pub fn freelocale(__dataset: locale_t);
}
extern "C" {
    pub fn uselocale(__dataset: locale_t) -> locale_t;
}
pub type pg_funcptr_t = ::core::option::Option<unsafe extern "C" fn()>;
pub type Pointer = *mut libc::c_char;
pub type int8 = libc::c_schar;
pub type int16 = libc::c_short;
pub type int32 = libc::c_int;
pub type uint8 = libc::c_uchar;
pub type uint16 = libc::c_ushort;
pub type bits8 = uint8;
pub type bits16 = uint16;
pub type bits32 = u32;
pub type int128 = i128;
pub type uint128 = u128;
pub type Size = usize;
pub type Index = libc::c_uint;
pub type Offset = libc::c_int;
pub type float4 = f32;
pub type float8 = f64;
pub type regproc = Oid;
pub type RegProcedure = regproc;
pub type TransactionId = u32;
pub type LocalTransactionId = u32;
pub type SubTransactionId = u32;
pub type MultiXactId = TransactionId;
pub type MultiXactOffset = u32;
pub type CommandId = u32;
#[repr(C)]
#[derive(Debug)]
pub struct varlena {
    pub vl_len_: [libc::c_char; 4usize],
    pub vl_dat: __IncompleteArrayField<libc::c_char>,
}
pub type bytea = varlena;
pub type text = varlena;
pub type BpChar = varlena;
pub type VarChar = varlena;
#[repr(C)]
#[derive(Debug)]
pub struct int2vector {
    pub vl_len_: int32,
    pub ndim: libc::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: libc::c_int,
    pub lbound1: libc::c_int,
    pub values: __IncompleteArrayField<int16>,
}
#[repr(C)]
#[derive(Debug)]
pub struct oidvector {
    pub vl_len_: int32,
    pub ndim: libc::c_int,
    pub dataoffset: int32,
    pub elemtype: Oid,
    pub dim1: libc::c_int,
    pub lbound1: libc::c_int,
    pub values: __IncompleteArrayField<Oid>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct nameData {
    pub data: [libc::c_char; 64usize],
}
pub type NameData = nameData;
pub type Name = *mut NameData;
extern "C" {
    pub fn ExceptionalCondition(
        conditionName: *const libc::c_char,
        fileName: *const libc::c_char,
        lineNumber: libc::c_int,
    ) -> !;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PGAlignedBlock {
    pub data: [libc::c_char; 8192usize],
    pub force_align_d: f64,
    pub force_align_i64: i64,
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub union PGIOAlignedBlock {
    pub data: [libc::c_char; 8192usize],
    pub force_align_d: f64,
    pub force_align_i64: i64,
}
#[repr(C)]
#[repr(align(4096))]
#[derive(Copy, Clone)]
pub union PGAlignedXLogBlock {
    pub data: [libc::c_char; 8192usize],
    pub force_align_d: f64,
    pub force_align_i64: i64,
}
pub const _ISupper: _bindgen_ty_10 = 256;
pub const _ISlower: _bindgen_ty_10 = 512;
pub const _ISalpha: _bindgen_ty_10 = 1024;
pub const _ISdigit: _bindgen_ty_10 = 2048;
pub const _ISxdigit: _bindgen_ty_10 = 4096;
pub const _ISspace: _bindgen_ty_10 = 8192;
pub const _ISprint: _bindgen_ty_10 = 16384;
pub const _ISgraph: _bindgen_ty_10 = 32768;
pub const _ISblank: _bindgen_ty_10 = 1;
pub const _IScntrl: _bindgen_ty_10 = 2;
pub const _ISpunct: _bindgen_ty_10 = 4;
pub const _ISalnum: _bindgen_ty_10 = 8;
pub type _bindgen_ty_10 = libc::c_uint;
extern "C" {
    pub fn __ctype_b_loc() -> *mut *const libc::c_ushort;
}
extern "C" {
    pub fn __ctype_tolower_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn __ctype_toupper_loc() -> *mut *const __int32_t;
}
extern "C" {
    pub fn isalnum(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isalpha(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn iscntrl(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isdigit(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn islower(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isgraph(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isprint(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn ispunct(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isspace(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isupper(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isxdigit(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn tolower(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn toupper(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isblank(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isascii(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn toascii(__c: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn _toupper(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn _tolower(arg1: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isalnum_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isalpha_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn iscntrl_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isdigit_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn islower_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isgraph_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isprint_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn ispunct_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isspace_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isupper_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isxdigit_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn isblank_l(arg1: libc::c_int, arg2: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn __tolower_l(__c: libc::c_int, __l: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn tolower_l(__c: libc::c_int, __l: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn __toupper_l(__c: libc::c_int, __l: locale_t) -> libc::c_int;
}
extern "C" {
    pub fn toupper_l(__c: libc::c_int, __l: locale_t) -> libc::c_int;
}
pub type pgsocket = libc::c_int;
extern "C" {
    pub fn pg_set_noblock(sock: pgsocket) -> bool;
}
extern "C" {
    pub fn pg_set_block(sock: pgsocket) -> bool;
}
extern "C" {
    pub fn has_drive_prefix(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn first_dir_separator(filename: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn last_dir_separator(filename: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn first_path_var_separator(pathlist: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn join_path_components(
        ret_path: *mut libc::c_char,
        head: *const libc::c_char,
        tail: *const libc::c_char,
    );
}
extern "C" {
    pub fn canonicalize_path(path: *mut libc::c_char);
}
extern "C" {
    pub fn make_native_path(filename: *mut libc::c_char);
}
extern "C" {
    pub fn cleanup_path(path: *mut libc::c_char);
}
extern "C" {
    pub fn path_contains_parent_reference(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn path_is_relative_and_below_cwd(path: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn path_is_prefix_of_path(path1: *const libc::c_char, path2: *const libc::c_char) -> bool;
}
extern "C" {
    pub fn make_absolute_path(path: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn get_progname(argv0: *const libc::c_char) -> *const libc::c_char;
}
extern "C" {
    pub fn get_share_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_etc_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_include_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_pkginclude_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_includeserver_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_lib_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_pkglib_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_locale_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_doc_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_html_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_man_path(my_exec_path: *const libc::c_char, ret_path: *mut libc::c_char);
}
extern "C" {
    pub fn get_home_path(ret_path: *mut libc::c_char) -> bool;
}
extern "C" {
    pub fn get_parent_directory(path: *mut libc::c_char);
}
extern "C" {
    pub fn pgfnames(path: *const libc::c_char) -> *mut *mut libc::c_char;
}
extern "C" {
    pub fn pgfnames_cleanup(filenames: *mut *mut libc::c_char);
}
extern "C" {
    pub fn set_pglocale_pgservice(argv0: *const libc::c_char, app: *const libc::c_char);
}
extern "C" {
    pub fn validate_exec(path: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn find_my_exec(argv0: *const libc::c_char, retpath: *mut libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn find_other_exec(
        argv0: *const libc::c_char,
        target: *const libc::c_char,
        versionstr: *const libc::c_char,
        retpath: *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pipe_read_line(cmd: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_usleep(microsec: libc::c_long);
}
extern "C" {
    pub fn pg_strcasecmp(s1: *const libc::c_char, s2: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pg_strncasecmp(
        s1: *const libc::c_char,
        s2: *const libc::c_char,
        n: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_toupper(ch: libc::c_uchar) -> libc::c_uchar;
}
extern "C" {
    pub fn pg_tolower(ch: libc::c_uchar) -> libc::c_uchar;
}
extern "C" {
    pub fn pg_ascii_toupper(ch: libc::c_uchar) -> libc::c_uchar;
}
extern "C" {
    pub fn pg_ascii_tolower(ch: libc::c_uchar) -> libc::c_uchar;
}
extern "C" {
    pub fn pg_vsnprintf(
        str_: *mut libc::c_char,
        count: usize,
        fmt: *const libc::c_char,
        args: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_snprintf(
        str_: *mut libc::c_char,
        count: usize,
        fmt: *const libc::c_char,
        ...
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_vsprintf(
        str_: *mut libc::c_char,
        fmt: *const libc::c_char,
        args: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_sprintf(str_: *mut libc::c_char, fmt: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn pg_vfprintf(
        stream: *mut FILE,
        fmt: *const libc::c_char,
        args: *mut __va_list_tag,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_fprintf(stream: *mut FILE, fmt: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn pg_vprintf(fmt: *const libc::c_char, args: *mut __va_list_tag) -> libc::c_int;
}
extern "C" {
    pub fn pg_printf(fmt: *const libc::c_char, ...) -> libc::c_int;
}
extern "C" {
    pub fn pg_strfromd(
        str_: *mut libc::c_char,
        count: usize,
        precision: libc::c_int,
        value: f64,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_strerror(errnum: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_strerror_r(
        errnum: libc::c_int,
        buf: *mut libc::c_char,
        buflen: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_strsignal(signum: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn pclose_check(stream: *mut FILE) -> libc::c_int;
}
extern "C" {
    pub fn rmtree(path: *const libc::c_char, rmtopdir: bool) -> bool;
}
extern "C" {
    pub fn getpeereid(sock: libc::c_int, uid: *mut uid_t, gid: *mut gid_t) -> libc::c_int;
}
pub type float_t = f32;
pub type double_t = f64;
extern "C" {
    pub fn __fpclassify(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn __signbit(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn __isinf(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn __finite(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn __isnan(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn __iseqsig(__x: f64, __y: f64) -> libc::c_int;
}
extern "C" {
    pub fn __issignaling(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn acos(__x: f64) -> f64;
}
extern "C" {
    pub fn __acos(__x: f64) -> f64;
}
extern "C" {
    pub fn asin(__x: f64) -> f64;
}
extern "C" {
    pub fn __asin(__x: f64) -> f64;
}
extern "C" {
    pub fn atan(__x: f64) -> f64;
}
extern "C" {
    pub fn __atan(__x: f64) -> f64;
}
extern "C" {
    pub fn atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn __atan2(__y: f64, __x: f64) -> f64;
}
extern "C" {
    pub fn cos(__x: f64) -> f64;
}
extern "C" {
    pub fn __cos(__x: f64) -> f64;
}
extern "C" {
    pub fn sin(__x: f64) -> f64;
}
extern "C" {
    pub fn __sin(__x: f64) -> f64;
}
extern "C" {
    pub fn tan(__x: f64) -> f64;
}
extern "C" {
    pub fn __tan(__x: f64) -> f64;
}
extern "C" {
    pub fn cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __cosh(__x: f64) -> f64;
}
extern "C" {
    pub fn sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __sinh(__x: f64) -> f64;
}
extern "C" {
    pub fn tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __tanh(__x: f64) -> f64;
}
extern "C" {
    pub fn acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn __acosh(__x: f64) -> f64;
}
extern "C" {
    pub fn asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn __asinh(__x: f64) -> f64;
}
extern "C" {
    pub fn atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn __atanh(__x: f64) -> f64;
}
extern "C" {
    pub fn exp(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp(__x: f64) -> f64;
}
extern "C" {
    pub fn frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn __frexp(__x: f64, __exponent: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn ldexp(__x: f64, __exponent: libc::c_int) -> f64;
}
extern "C" {
    pub fn __ldexp(__x: f64, __exponent: libc::c_int) -> f64;
}
extern "C" {
    pub fn log(__x: f64) -> f64;
}
extern "C" {
    pub fn __log(__x: f64) -> f64;
}
extern "C" {
    pub fn log10(__x: f64) -> f64;
}
extern "C" {
    pub fn __log10(__x: f64) -> f64;
}
extern "C" {
    pub fn modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn __modf(__x: f64, __iptr: *mut f64) -> f64;
}
extern "C" {
    pub fn expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn __expm1(__x: f64) -> f64;
}
extern "C" {
    pub fn log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn __log1p(__x: f64) -> f64;
}
extern "C" {
    pub fn logb(__x: f64) -> f64;
}
extern "C" {
    pub fn __logb(__x: f64) -> f64;
}
extern "C" {
    pub fn exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn __exp2(__x: f64) -> f64;
}
extern "C" {
    pub fn log2(__x: f64) -> f64;
}
extern "C" {
    pub fn __log2(__x: f64) -> f64;
}
extern "C" {
    pub fn pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __pow(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __sqrt(__x: f64) -> f64;
}
extern "C" {
    pub fn hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __hypot(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn __cbrt(__x: f64) -> f64;
}
extern "C" {
    pub fn ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn __ceil(__x: f64) -> f64;
}
extern "C" {
    pub fn fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn __fabs(__x: f64) -> f64;
}
extern "C" {
    pub fn floor(__x: f64) -> f64;
}
extern "C" {
    pub fn __floor(__x: f64) -> f64;
}
extern "C" {
    pub fn fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmod(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn isinf(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn finite(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __drem(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn significand(__x: f64) -> f64;
}
extern "C" {
    pub fn __significand(__x: f64) -> f64;
}
extern "C" {
    pub fn copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __copysign(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nan(__tagb: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn __nan(__tagb: *const libc::c_char) -> f64;
}
extern "C" {
    pub fn isnan(__value: f64) -> libc::c_int;
}
extern "C" {
    pub fn j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j0(arg1: f64) -> f64;
}
extern "C" {
    pub fn j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __j1(arg1: f64) -> f64;
}
extern "C" {
    pub fn jn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __jn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y0(arg1: f64) -> f64;
}
extern "C" {
    pub fn y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn __y1(arg1: f64) -> f64;
}
extern "C" {
    pub fn yn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn __yn(arg1: libc::c_int, arg2: f64) -> f64;
}
extern "C" {
    pub fn erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erf(arg1: f64) -> f64;
}
extern "C" {
    pub fn erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn __erfc(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __lgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __tgamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn __gamma(arg1: f64) -> f64;
}
extern "C" {
    pub fn lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn __lgamma_r(arg1: f64, __signgamp: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn rint(__x: f64) -> f64;
}
extern "C" {
    pub fn __rint(__x: f64) -> f64;
}
extern "C" {
    pub fn nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __nextafter(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn __nexttoward(__x: f64, __y: u128) -> f64;
}
extern "C" {
    pub fn remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __remainder(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn scalbn(__x: f64, __n: libc::c_int) -> f64;
}
extern "C" {
    pub fn __scalbn(__x: f64, __n: libc::c_int) -> f64;
}
extern "C" {
    pub fn ilogb(__x: f64) -> libc::c_int;
}
extern "C" {
    pub fn __ilogb(__x: f64) -> libc::c_int;
}
extern "C" {
    pub fn scalbln(__x: f64, __n: libc::c_long) -> f64;
}
extern "C" {
    pub fn __scalbln(__x: f64, __n: libc::c_long) -> f64;
}
extern "C" {
    pub fn nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn __nearbyint(__x: f64) -> f64;
}
extern "C" {
    pub fn round(__x: f64) -> f64;
}
extern "C" {
    pub fn __round(__x: f64) -> f64;
}
extern "C" {
    pub fn trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn __trunc(__x: f64) -> f64;
}
extern "C" {
    pub fn remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn __remquo(__x: f64, __y: f64, __quo: *mut libc::c_int) -> f64;
}
extern "C" {
    pub fn lrint(__x: f64) -> libc::c_long;
}
extern "C" {
    pub fn __lrint(__x: f64) -> libc::c_long;
}
extern "C" {
    pub fn llrint(__x: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn __llrint(__x: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn lround(__x: f64) -> libc::c_long;
}
extern "C" {
    pub fn __lround(__x: f64) -> libc::c_long;
}
extern "C" {
    pub fn llround(__x: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn __llround(__x: f64) -> libc::c_longlong;
}
extern "C" {
    pub fn fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fdim(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmax(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn __fmin(__x: f64, __y: f64) -> f64;
}
extern "C" {
    pub fn fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn __fma(__x: f64, __y: f64, __z: f64) -> f64;
}
extern "C" {
    pub fn scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __scalb(__x: f64, __n: f64) -> f64;
}
extern "C" {
    pub fn __fpclassifyf(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn __signbitf(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn __isinff(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn __finitef(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn __isnanf(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn __iseqsigf(__x: f32, __y: f32) -> libc::c_int;
}
extern "C" {
    pub fn __issignalingf(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acosf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanf(__x: f32) -> f32;
}
extern "C" {
    pub fn atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn __atan2f(__y: f32, __x: f32) -> f32;
}
extern "C" {
    pub fn cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cosf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanf(__x: f32) -> f32;
}
extern "C" {
    pub fn coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __coshf(__x: f32) -> f32;
}
extern "C" {
    pub fn sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __tanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn __acoshf(__x: f32) -> f32;
}
extern "C" {
    pub fn asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __asinhf(__x: f32) -> f32;
}
extern "C" {
    pub fn atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn __atanhf(__x: f32) -> f32;
}
extern "C" {
    pub fn expf(__x: f32) -> f32;
}
extern "C" {
    pub fn __expf(__x: f32) -> f32;
}
extern "C" {
    pub fn frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn __frexpf(__x: f32, __exponent: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
}
extern "C" {
    pub fn __ldexpf(__x: f32, __exponent: libc::c_int) -> f32;
}
extern "C" {
    pub fn logf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logf(__x: f32) -> f32;
}
extern "C" {
    pub fn log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log10f(__x: f32) -> f32;
}
extern "C" {
    pub fn modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn __modff(__x: f32, __iptr: *mut f32) -> f32;
}
extern "C" {
    pub fn expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn __expm1f(__x: f32) -> f32;
}
extern "C" {
    pub fn log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn __log1pf(__x: f32) -> f32;
}
extern "C" {
    pub fn logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn __logbf(__x: f32) -> f32;
}
extern "C" {
    pub fn exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __exp2f(__x: f32) -> f32;
}
extern "C" {
    pub fn log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn __log2f(__x: f32) -> f32;
}
extern "C" {
    pub fn powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __powf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __sqrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __hypotf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn __cbrtf(__x: f32) -> f32;
}
extern "C" {
    pub fn ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn __ceilf(__x: f32) -> f32;
}
extern "C" {
    pub fn fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn __fabsf(__x: f32) -> f32;
}
extern "C" {
    pub fn floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn __floorf(__x: f32) -> f32;
}
extern "C" {
    pub fn fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmodf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn isinff(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn finitef(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __dremf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn __significandf(__x: f32) -> f32;
}
extern "C" {
    pub fn copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __copysignf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nanf(__tagb: *const libc::c_char) -> f32;
}
extern "C" {
    pub fn __nanf(__tagb: *const libc::c_char) -> f32;
}
extern "C" {
    pub fn isnanf(__value: f32) -> libc::c_int;
}
extern "C" {
    pub fn j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __j1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn jnf(arg1: libc::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __jnf(arg1: libc::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y0f(arg1: f32) -> f32;
}
extern "C" {
    pub fn y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn __y1f(arg1: f32) -> f32;
}
extern "C" {
    pub fn ynf(arg1: libc::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn __ynf(arg1: libc::c_int, arg2: f32) -> f32;
}
extern "C" {
    pub fn erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erff(arg1: f32) -> f32;
}
extern "C" {
    pub fn erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __erfcf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __lgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __tgammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn __gammaf(arg1: f32) -> f32;
}
extern "C" {
    pub fn lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn __lgammaf_r(arg1: f32, __signgamp: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __rintf(__x: f32) -> f32;
}
extern "C" {
    pub fn nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __nextafterf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn __nexttowardf(__x: f32, __y: u128) -> f32;
}
extern "C" {
    pub fn remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __remainderf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn scalbnf(__x: f32, __n: libc::c_int) -> f32;
}
extern "C" {
    pub fn __scalbnf(__x: f32, __n: libc::c_int) -> f32;
}
extern "C" {
    pub fn ilogbf(__x: f32) -> libc::c_int;
}
extern "C" {
    pub fn __ilogbf(__x: f32) -> libc::c_int;
}
extern "C" {
    pub fn scalblnf(__x: f32, __n: libc::c_long) -> f32;
}
extern "C" {
    pub fn __scalblnf(__x: f32, __n: libc::c_long) -> f32;
}
extern "C" {
    pub fn nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn __nearbyintf(__x: f32) -> f32;
}
extern "C" {
    pub fn roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn __roundf(__x: f32) -> f32;
}
extern "C" {
    pub fn truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn __truncf(__x: f32) -> f32;
}
extern "C" {
    pub fn remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn __remquof(__x: f32, __y: f32, __quo: *mut libc::c_int) -> f32;
}
extern "C" {
    pub fn lrintf(__x: f32) -> libc::c_long;
}
extern "C" {
    pub fn __lrintf(__x: f32) -> libc::c_long;
}
extern "C" {
    pub fn llrintf(__x: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn __llrintf(__x: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn lroundf(__x: f32) -> libc::c_long;
}
extern "C" {
    pub fn __lroundf(__x: f32) -> libc::c_long;
}
extern "C" {
    pub fn llroundf(__x: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn __llroundf(__x: f32) -> libc::c_longlong;
}
extern "C" {
    pub fn fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fdimf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fmaxf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn __fminf(__x: f32, __y: f32) -> f32;
}
extern "C" {
    pub fn fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn __fmaf(__x: f32, __y: f32, __z: f32) -> f32;
}
extern "C" {
    pub fn scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __scalbf(__x: f32, __n: f32) -> f32;
}
extern "C" {
    pub fn __fpclassifyl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn __signbitl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn __isinfl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn __finitel(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn __isnanl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn __iseqsigl(__x: u128, __y: u128) -> libc::c_int;
}
extern "C" {
    pub fn __issignalingl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acosl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanl(__x: u128) -> u128;
}
extern "C" {
    pub fn atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn __atan2l(__y: u128, __x: u128) -> u128;
}
extern "C" {
    pub fn cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cosl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanl(__x: u128) -> u128;
}
extern "C" {
    pub fn coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __coshl(__x: u128) -> u128;
}
extern "C" {
    pub fn sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __tanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn __acoshl(__x: u128) -> u128;
}
extern "C" {
    pub fn asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __asinhl(__x: u128) -> u128;
}
extern "C" {
    pub fn atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn __atanhl(__x: u128) -> u128;
}
extern "C" {
    pub fn expl(__x: u128) -> u128;
}
extern "C" {
    pub fn __expl(__x: u128) -> u128;
}
extern "C" {
    pub fn frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn __frexpl(__x: u128, __exponent: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
}
extern "C" {
    pub fn __ldexpl(__x: u128, __exponent: libc::c_int) -> u128;
}
extern "C" {
    pub fn logl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logl(__x: u128) -> u128;
}
extern "C" {
    pub fn log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log10l(__x: u128) -> u128;
}
extern "C" {
    pub fn modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn __modfl(__x: u128, __iptr: *mut u128) -> u128;
}
extern "C" {
    pub fn expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn __expm1l(__x: u128) -> u128;
}
extern "C" {
    pub fn log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn __log1pl(__x: u128) -> u128;
}
extern "C" {
    pub fn logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn __logbl(__x: u128) -> u128;
}
extern "C" {
    pub fn exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __exp2l(__x: u128) -> u128;
}
extern "C" {
    pub fn log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn __log2l(__x: u128) -> u128;
}
extern "C" {
    pub fn powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __powl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __sqrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __hypotl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn __cbrtl(__x: u128) -> u128;
}
extern "C" {
    pub fn ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn __ceill(__x: u128) -> u128;
}
extern "C" {
    pub fn fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn __fabsl(__x: u128) -> u128;
}
extern "C" {
    pub fn floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn __floorl(__x: u128) -> u128;
}
extern "C" {
    pub fn fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmodl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn isinfl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn finitel(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __dreml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn __significandl(__x: u128) -> u128;
}
extern "C" {
    pub fn copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __copysignl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nanl(__tagb: *const libc::c_char) -> u128;
}
extern "C" {
    pub fn __nanl(__tagb: *const libc::c_char) -> u128;
}
extern "C" {
    pub fn isnanl(__value: u128) -> libc::c_int;
}
extern "C" {
    pub fn j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __j1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn jnl(arg1: libc::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __jnl(arg1: libc::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y0l(arg1: u128) -> u128;
}
extern "C" {
    pub fn y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn __y1l(arg1: u128) -> u128;
}
extern "C" {
    pub fn ynl(arg1: libc::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn __ynl(arg1: libc::c_int, arg2: u128) -> u128;
}
extern "C" {
    pub fn erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfl(arg1: u128) -> u128;
}
extern "C" {
    pub fn erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn __erfcl(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __lgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __tgammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn __gammal(arg1: u128) -> u128;
}
extern "C" {
    pub fn lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn __lgammal_r(arg1: u128, __signgamp: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __rintl(__x: u128) -> u128;
}
extern "C" {
    pub fn nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nextafterl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __nexttowardl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __remainderl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn scalbnl(__x: u128, __n: libc::c_int) -> u128;
}
extern "C" {
    pub fn __scalbnl(__x: u128, __n: libc::c_int) -> u128;
}
extern "C" {
    pub fn ilogbl(__x: u128) -> libc::c_int;
}
extern "C" {
    pub fn __ilogbl(__x: u128) -> libc::c_int;
}
extern "C" {
    pub fn scalblnl(__x: u128, __n: libc::c_long) -> u128;
}
extern "C" {
    pub fn __scalblnl(__x: u128, __n: libc::c_long) -> u128;
}
extern "C" {
    pub fn nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn __nearbyintl(__x: u128) -> u128;
}
extern "C" {
    pub fn roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn __roundl(__x: u128) -> u128;
}
extern "C" {
    pub fn truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn __truncl(__x: u128) -> u128;
}
extern "C" {
    pub fn remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn __remquol(__x: u128, __y: u128, __quo: *mut libc::c_int) -> u128;
}
extern "C" {
    pub fn lrintl(__x: u128) -> libc::c_long;
}
extern "C" {
    pub fn __lrintl(__x: u128) -> libc::c_long;
}
extern "C" {
    pub fn llrintl(__x: u128) -> libc::c_longlong;
}
extern "C" {
    pub fn __llrintl(__x: u128) -> libc::c_longlong;
}
extern "C" {
    pub fn lroundl(__x: u128) -> libc::c_long;
}
extern "C" {
    pub fn __lroundl(__x: u128) -> libc::c_long;
}
extern "C" {
    pub fn llroundl(__x: u128) -> libc::c_longlong;
}
extern "C" {
    pub fn __llroundl(__x: u128) -> libc::c_longlong;
}
extern "C" {
    pub fn fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fdiml(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fmaxl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn __fminl(__x: u128, __y: u128) -> u128;
}
extern "C" {
    pub fn fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn __fmal(__x: u128, __y: u128, __z: u128) -> u128;
}
extern "C" {
    pub fn scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub fn __scalbl(__x: u128, __n: u128) -> u128;
}
extern "C" {
    pub static mut signgam: libc::c_int;
}
pub const FP_NAN: _bindgen_ty_11 = 0;
pub const FP_INFINITE: _bindgen_ty_11 = 1;
pub const FP_ZERO: _bindgen_ty_11 = 2;
pub const FP_SUBNORMAL: _bindgen_ty_11 = 3;
pub const FP_NORMAL: _bindgen_ty_11 = 4;
pub type _bindgen_ty_11 = libc::c_uint;
extern "C" {
    pub fn strlcat(dst: *mut libc::c_char, src: *const libc::c_char, siz: usize) -> usize;
}
extern "C" {
    pub fn strlcpy(dst: *mut libc::c_char, src: *const libc::c_char, siz: usize) -> usize;
}
extern "C" {
    pub fn pg_get_user_name(user_id: uid_t, buffer: *mut libc::c_char, buflen: usize) -> bool;
}
extern "C" {
    pub fn pg_get_user_home_dir(user_id: uid_t, buffer: *mut libc::c_char, buflen: usize) -> bool;
}
extern "C" {
    pub fn pg_qsort(
        base: *mut libc::c_void,
        nel: usize,
        elsize: usize,
        cmp: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
            ) -> libc::c_int,
        >,
    );
}
extern "C" {
    pub fn pg_qsort_strcmp(a: *const libc::c_void, b: *const libc::c_void) -> libc::c_int;
}
pub type qsort_arg_comparator = ::core::option::Option<
    unsafe extern "C" fn(
        a: *const libc::c_void,
        b: *const libc::c_void,
        arg: *mut libc::c_void,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn qsort_arg(
        base: *mut libc::c_void,
        nel: usize,
        elsize: usize,
        cmp: qsort_arg_comparator,
        arg: *mut libc::c_void,
    );
}
extern "C" {
    pub fn qsort_interruptible(
        base: *mut libc::c_void,
        nel: usize,
        elsize: usize,
        cmp: qsort_arg_comparator,
        arg: *mut libc::c_void,
    );
}
extern "C" {
    pub fn bsearch_arg(
        key: *const libc::c_void,
        base0: *const libc::c_void,
        nmemb: usize,
        size: usize,
        compar: ::core::option::Option<
            unsafe extern "C" fn(
                arg1: *const libc::c_void,
                arg2: *const libc::c_void,
                arg3: *mut libc::c_void,
            ) -> libc::c_int,
        >,
        arg: *mut libc::c_void,
    ) -> *mut libc::c_void;
}
extern "C" {
    pub fn pg_get_encoding_from_locale(
        ctype: *const libc::c_char,
        write_message: bool,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pg_inet_net_ntop(
        af: libc::c_int,
        src: *const libc::c_void,
        bits: libc::c_int,
        dst: *mut libc::c_char,
        size: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn pg_strong_random_init();
}
extern "C" {
    pub fn pg_strong_random(buf: *mut libc::c_void, len: usize) -> bool;
}
extern "C" {
    pub fn pg_check_dir(dir: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pg_mkdir_p(path: *mut libc::c_char, omode: libc::c_int) -> libc::c_int;
}
pub type pqsigfunc = ::core::option::Option<unsafe extern "C" fn(postgres_signal_arg: libc::c_int)>;
extern "C" {
    pub fn pqsignal(signo: libc::c_int, func: pqsigfunc) -> pqsigfunc;
}
extern "C" {
    pub fn escape_single_quotes_ascii(src: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn wait_result_to_str(exitstatus: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn wait_result_is_signal(exit_status: libc::c_int, signum: libc::c_int) -> bool;
}
extern "C" {
    pub fn wait_result_is_any_signal(
        exit_status: libc::c_int,
        include_command_not_found: bool,
    ) -> bool;
}
extern "C" {
    pub fn wait_result_to_exit_code(exit_status: libc::c_int) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct tm {
    pub tm_sec: libc::c_int,
    pub tm_min: libc::c_int,
    pub tm_hour: libc::c_int,
    pub tm_mday: libc::c_int,
    pub tm_mon: libc::c_int,
    pub tm_year: libc::c_int,
    pub tm_wday: libc::c_int,
    pub tm_yday: libc::c_int,
    pub tm_isdst: libc::c_int,
    pub tm_gmtoff: libc::c_long,
    pub tm_zone: *const libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerspec {
    pub it_interval: timespec,
    pub it_value: timespec,
}
extern "C" {
    pub fn clock() -> clock_t;
}
extern "C" {
    pub fn time(__timer: *mut time_t) -> time_t;
}
extern "C" {
    pub fn difftime(__time1: time_t, __time0: time_t) -> f64;
}
extern "C" {
    pub fn mktime(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn strftime(
        __s: *mut libc::c_char,
        __maxsize: usize,
        __format: *const libc::c_char,
        __tp: *const tm,
    ) -> usize;
}
extern "C" {
    pub fn strftime_l(
        __s: *mut libc::c_char,
        __maxsize: usize,
        __format: *const libc::c_char,
        __tp: *const tm,
        __loc: locale_t,
    ) -> usize;
}
extern "C" {
    pub fn gmtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn localtime(__timer: *const time_t) -> *mut tm;
}
extern "C" {
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn localtime_r(__timer: *const time_t, __tp: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn asctime(__tp: *const tm) -> *mut libc::c_char;
}
extern "C" {
    pub fn ctime(__timer: *const time_t) -> *mut libc::c_char;
}
extern "C" {
    pub fn asctime_r(__tp: *const tm, __buf: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn ctime_r(__timer: *const time_t, __buf: *mut libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub static mut __tzname: [*mut libc::c_char; 2usize];
}
extern "C" {
    pub static mut __daylight: libc::c_int;
}
extern "C" {
    pub static mut __timezone: libc::c_long;
}
extern "C" {
    pub static mut tzname: [*mut libc::c_char; 2usize];
}
extern "C" {
    pub fn tzset();
}
extern "C" {
    pub static mut daylight: libc::c_int;
}
extern "C" {
    pub static mut timezone: libc::c_long;
}
extern "C" {
    pub fn timegm(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn timelocal(__tp: *mut tm) -> time_t;
}
extern "C" {
    pub fn dysize(__year: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn nanosleep(__requested_time: *const timespec, __remaining: *mut timespec) -> libc::c_int;
}
extern "C" {
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut timespec) -> libc::c_int;
}
extern "C" {
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut timespec) -> libc::c_int;
}
extern "C" {
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const timespec) -> libc::c_int;
}
extern "C" {
    pub fn clock_nanosleep(
        __clock_id: clockid_t,
        __flags: libc::c_int,
        __req: *const timespec,
        __rem: *mut timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t) -> libc::c_int;
}
extern "C" {
    pub fn timer_create(
        __clock_id: clockid_t,
        __evp: *mut sigevent,
        __timerid: *mut timer_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn timer_delete(__timerid: timer_t) -> libc::c_int;
}
extern "C" {
    pub fn timer_settime(
        __timerid: timer_t,
        __flags: libc::c_int,
        __value: *const itimerspec,
        __ovalue: *mut itimerspec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn timer_gettime(__timerid: timer_t, __value: *mut itimerspec) -> libc::c_int;
}
extern "C" {
    pub fn timer_getoverrun(__timerid: timer_t) -> libc::c_int;
}
extern "C" {
    pub fn timespec_get(__ts: *mut timespec, __base: libc::c_int) -> libc::c_int;
}
pub const CONNECTION_OK: ConnStatusType = 0;
pub const CONNECTION_BAD: ConnStatusType = 1;
pub const CONNECTION_STARTED: ConnStatusType = 2;
pub const CONNECTION_MADE: ConnStatusType = 3;
pub const CONNECTION_AWAITING_RESPONSE: ConnStatusType = 4;
pub const CONNECTION_AUTH_OK: ConnStatusType = 5;
pub const CONNECTION_SETENV: ConnStatusType = 6;
pub const CONNECTION_SSL_STARTUP: ConnStatusType = 7;
pub const CONNECTION_NEEDED: ConnStatusType = 8;
pub const CONNECTION_CHECK_WRITABLE: ConnStatusType = 9;
pub const CONNECTION_CONSUME: ConnStatusType = 10;
pub const CONNECTION_GSS_STARTUP: ConnStatusType = 11;
pub const CONNECTION_CHECK_TARGET: ConnStatusType = 12;
pub const CONNECTION_CHECK_STANDBY: ConnStatusType = 13;
pub const CONNECTION_ALLOCATED: ConnStatusType = 14;
pub type ConnStatusType = libc::c_uint;
pub const PGRES_POLLING_FAILED: PostgresPollingStatusType = 0;
pub const PGRES_POLLING_READING: PostgresPollingStatusType = 1;
pub const PGRES_POLLING_WRITING: PostgresPollingStatusType = 2;
pub const PGRES_POLLING_OK: PostgresPollingStatusType = 3;
pub const PGRES_POLLING_ACTIVE: PostgresPollingStatusType = 4;
pub type PostgresPollingStatusType = libc::c_uint;
pub const PGRES_EMPTY_QUERY: ExecStatusType = 0;
pub const PGRES_COMMAND_OK: ExecStatusType = 1;
pub const PGRES_TUPLES_OK: ExecStatusType = 2;
pub const PGRES_COPY_OUT: ExecStatusType = 3;
pub const PGRES_COPY_IN: ExecStatusType = 4;
pub const PGRES_BAD_RESPONSE: ExecStatusType = 5;
pub const PGRES_NONFATAL_ERROR: ExecStatusType = 6;
pub const PGRES_FATAL_ERROR: ExecStatusType = 7;
pub const PGRES_COPY_BOTH: ExecStatusType = 8;
pub const PGRES_SINGLE_TUPLE: ExecStatusType = 9;
pub const PGRES_PIPELINE_SYNC: ExecStatusType = 10;
pub const PGRES_PIPELINE_ABORTED: ExecStatusType = 11;
pub const PGRES_TUPLES_CHUNK: ExecStatusType = 12;
pub type ExecStatusType = libc::c_uint;
pub const PQTRANS_IDLE: PGTransactionStatusType = 0;
pub const PQTRANS_ACTIVE: PGTransactionStatusType = 1;
pub const PQTRANS_INTRANS: PGTransactionStatusType = 2;
pub const PQTRANS_INERROR: PGTransactionStatusType = 3;
pub const PQTRANS_UNKNOWN: PGTransactionStatusType = 4;
pub type PGTransactionStatusType = libc::c_uint;
pub const PQERRORS_TERSE: PGVerbosity = 0;
pub const PQERRORS_DEFAULT: PGVerbosity = 1;
pub const PQERRORS_VERBOSE: PGVerbosity = 2;
pub const PQERRORS_SQLSTATE: PGVerbosity = 3;
pub type PGVerbosity = libc::c_uint;
pub const PQSHOW_CONTEXT_NEVER: PGContextVisibility = 0;
pub const PQSHOW_CONTEXT_ERRORS: PGContextVisibility = 1;
pub const PQSHOW_CONTEXT_ALWAYS: PGContextVisibility = 2;
pub type PGContextVisibility = libc::c_uint;
pub const PQPING_OK: PGPing = 0;
pub const PQPING_REJECT: PGPing = 1;
pub const PQPING_NO_RESPONSE: PGPing = 2;
pub const PQPING_NO_ATTEMPT: PGPing = 3;
pub type PGPing = libc::c_uint;
pub const PQ_PIPELINE_OFF: PGpipelineStatus = 0;
pub const PQ_PIPELINE_ON: PGpipelineStatus = 1;
pub const PQ_PIPELINE_ABORTED: PGpipelineStatus = 2;
pub type PGpipelineStatus = libc::c_uint;
pub type PGconn = pg_conn;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_cancel_conn {
    _unused: [u8; 0],
}
pub type PGcancelConn = pg_cancel_conn;
pub type PGresult = pg_result;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_cancel {
    _unused: [u8; 0],
}
pub type PGcancel = pg_cancel;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgNotify {
    pub relname: *mut libc::c_char,
    pub be_pid: libc::c_int,
    pub extra: *mut libc::c_char,
    pub next: *mut pgNotify,
}
pub type PGnotify = pgNotify;
pub type PQnoticeReceiver =
    ::core::option::Option<unsafe extern "C" fn(arg: *mut libc::c_void, res: *const PGresult)>;
pub type PQnoticeProcessor = ::core::option::Option<
    unsafe extern "C" fn(arg: *mut libc::c_void, message: *const libc::c_char),
>;
pub type pqbool = libc::c_char;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PQprintOpt {
    pub header: pqbool,
    pub align: pqbool,
    pub standard: pqbool,
    pub html3: pqbool,
    pub expanded: pqbool,
    pub pager: pqbool,
    pub fieldSep: *mut libc::c_char,
    pub tableOpt: *mut libc::c_char,
    pub caption: *mut libc::c_char,
    pub fieldName: *mut *mut libc::c_char,
}
pub type PQprintOpt = _PQprintOpt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _PQconninfoOption {
    pub keyword: *mut libc::c_char,
    pub envvar: *mut libc::c_char,
    pub compiled: *mut libc::c_char,
    pub val: *mut libc::c_char,
    pub label: *mut libc::c_char,
    pub dispchar: *mut libc::c_char,
    pub dispsize: libc::c_int,
}
pub type PQconninfoOption = _PQconninfoOption;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PQArgBlock {
    pub len: libc::c_int,
    pub isint: libc::c_int,
    pub u: PQArgBlock__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PQArgBlock__bindgen_ty_1 {
    pub ptr: *mut libc::c_int,
    pub integer: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgresAttDesc {
    pub name: *mut libc::c_char,
    pub tableid: Oid,
    pub columnid: libc::c_int,
    pub format: libc::c_int,
    pub typid: Oid,
    pub typlen: libc::c_int,
    pub atttypmod: libc::c_int,
}
pub type PGresAttDesc = pgresAttDesc;
extern "C" {
    pub fn PQconnectStart(conninfo: *const libc::c_char) -> *mut PGconn;
}
extern "C" {
    pub fn PQconnectStartParams(
        keywords: *const *const libc::c_char,
        values: *const *const libc::c_char,
        expand_dbname: libc::c_int,
    ) -> *mut PGconn;
}
extern "C" {
    pub fn PQconnectPoll(conn: *mut PGconn) -> PostgresPollingStatusType;
}
extern "C" {
    pub fn PQconnectdb(conninfo: *const libc::c_char) -> *mut PGconn;
}
extern "C" {
    pub fn PQconnectdbParams(
        keywords: *const *const libc::c_char,
        values: *const *const libc::c_char,
        expand_dbname: libc::c_int,
    ) -> *mut PGconn;
}
extern "C" {
    pub fn PQsetdbLogin(
        pghost: *const libc::c_char,
        pgport: *const libc::c_char,
        pgoptions: *const libc::c_char,
        pgtty: *const libc::c_char,
        dbName: *const libc::c_char,
        login: *const libc::c_char,
        pwd: *const libc::c_char,
    ) -> *mut PGconn;
}
extern "C" {
    pub fn PQfinish(conn: *mut PGconn);
}
extern "C" {
    pub fn PQconndefaults() -> *mut PQconninfoOption;
}
extern "C" {
    pub fn PQconninfoParse(
        conninfo: *const libc::c_char,
        errmsg: *mut *mut libc::c_char,
    ) -> *mut PQconninfoOption;
}
extern "C" {
    pub fn PQconninfo(conn: *mut PGconn) -> *mut PQconninfoOption;
}
extern "C" {
    pub fn PQconninfoFree(connOptions: *mut PQconninfoOption);
}
extern "C" {
    pub fn PQresetStart(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQresetPoll(conn: *mut PGconn) -> PostgresPollingStatusType;
}
extern "C" {
    pub fn PQreset(conn: *mut PGconn);
}
extern "C" {
    pub fn PQcancelCreate(conn: *mut PGconn) -> *mut PGcancelConn;
}
extern "C" {
    pub fn PQcancelStart(cancelConn: *mut PGcancelConn) -> libc::c_int;
}
extern "C" {
    pub fn PQcancelBlocking(cancelConn: *mut PGcancelConn) -> libc::c_int;
}
extern "C" {
    pub fn PQcancelPoll(cancelConn: *mut PGcancelConn) -> PostgresPollingStatusType;
}
extern "C" {
    pub fn PQcancelStatus(cancelConn: *const PGcancelConn) -> ConnStatusType;
}
extern "C" {
    pub fn PQcancelSocket(cancelConn: *const PGcancelConn) -> libc::c_int;
}
extern "C" {
    pub fn PQcancelErrorMessage(cancelConn: *const PGcancelConn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQcancelReset(cancelConn: *mut PGcancelConn);
}
extern "C" {
    pub fn PQcancelFinish(cancelConn: *mut PGcancelConn);
}
extern "C" {
    pub fn PQgetCancel(conn: *mut PGconn) -> *mut PGcancel;
}
extern "C" {
    pub fn PQfreeCancel(cancel: *mut PGcancel);
}
extern "C" {
    pub fn PQcancel(
        cancel: *mut PGcancel,
        errbuf: *mut libc::c_char,
        errbufsize: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQrequestCancel(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQdb(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQuser(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQpass(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQhost(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQhostaddr(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQport(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQtty(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQoptions(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQstatus(conn: *const PGconn) -> ConnStatusType;
}
extern "C" {
    pub fn PQtransactionStatus(conn: *const PGconn) -> PGTransactionStatusType;
}
extern "C" {
    pub fn PQparameterStatus(
        conn: *const PGconn,
        paramName: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn PQprotocolVersion(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQserverVersion(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQerrorMessage(conn: *const PGconn) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQsocket(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQbackendPID(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQpipelineStatus(conn: *const PGconn) -> PGpipelineStatus;
}
extern "C" {
    pub fn PQconnectionNeedsPassword(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQconnectionUsedPassword(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQconnectionUsedGSSAPI(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQclientEncoding(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsetClientEncoding(conn: *mut PGconn, encoding: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQsslInUse(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsslStruct(conn: *mut PGconn, struct_name: *const libc::c_char) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQsslAttribute(
        conn: *mut PGconn,
        attribute_name: *const libc::c_char,
    ) -> *const libc::c_char;
}
extern "C" {
    pub fn PQsslAttributeNames(conn: *mut PGconn) -> *const *const libc::c_char;
}
extern "C" {
    pub fn PQgetssl(conn: *mut PGconn) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQinitSSL(do_init: libc::c_int);
}
extern "C" {
    pub fn PQinitOpenSSL(do_ssl: libc::c_int, do_crypto: libc::c_int);
}
extern "C" {
    pub fn PQgssEncInUse(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQgetgssctx(conn: *mut PGconn) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQsetErrorVerbosity(conn: *mut PGconn, verbosity: PGVerbosity) -> PGVerbosity;
}
extern "C" {
    pub fn PQsetErrorContextVisibility(
        conn: *mut PGconn,
        show_context: PGContextVisibility,
    ) -> PGContextVisibility;
}
extern "C" {
    pub fn PQsetNoticeReceiver(
        conn: *mut PGconn,
        proc_: PQnoticeReceiver,
        arg: *mut libc::c_void,
    ) -> PQnoticeReceiver;
}
extern "C" {
    pub fn PQsetNoticeProcessor(
        conn: *mut PGconn,
        proc_: PQnoticeProcessor,
        arg: *mut libc::c_void,
    ) -> PQnoticeProcessor;
}
pub type pgthreadlock_t = ::core::option::Option<unsafe extern "C" fn(acquire: libc::c_int)>;
extern "C" {
    pub fn PQregisterThreadLock(newhandler: pgthreadlock_t) -> pgthreadlock_t;
}
extern "C" {
    pub fn PQtrace(conn: *mut PGconn, debug_port: *mut FILE);
}
extern "C" {
    pub fn PQuntrace(conn: *mut PGconn);
}
extern "C" {
    pub fn PQsetTraceFlags(conn: *mut PGconn, flags: libc::c_int);
}
extern "C" {
    pub fn PQexec(conn: *mut PGconn, query: *const libc::c_char) -> *mut PGresult;
}
extern "C" {
    pub fn PQexecParams(
        conn: *mut PGconn,
        command: *const libc::c_char,
        nParams: libc::c_int,
        paramTypes: *const Oid,
        paramValues: *const *const libc::c_char,
        paramLengths: *const libc::c_int,
        paramFormats: *const libc::c_int,
        resultFormat: libc::c_int,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn PQprepare(
        conn: *mut PGconn,
        stmtName: *const libc::c_char,
        query: *const libc::c_char,
        nParams: libc::c_int,
        paramTypes: *const Oid,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn PQexecPrepared(
        conn: *mut PGconn,
        stmtName: *const libc::c_char,
        nParams: libc::c_int,
        paramValues: *const *const libc::c_char,
        paramLengths: *const libc::c_int,
        paramFormats: *const libc::c_int,
        resultFormat: libc::c_int,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn PQsendQuery(conn: *mut PGconn, query: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQsendQueryParams(
        conn: *mut PGconn,
        command: *const libc::c_char,
        nParams: libc::c_int,
        paramTypes: *const Oid,
        paramValues: *const *const libc::c_char,
        paramLengths: *const libc::c_int,
        paramFormats: *const libc::c_int,
        resultFormat: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQsendPrepare(
        conn: *mut PGconn,
        stmtName: *const libc::c_char,
        query: *const libc::c_char,
        nParams: libc::c_int,
        paramTypes: *const Oid,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQsendQueryPrepared(
        conn: *mut PGconn,
        stmtName: *const libc::c_char,
        nParams: libc::c_int,
        paramValues: *const *const libc::c_char,
        paramLengths: *const libc::c_int,
        paramFormats: *const libc::c_int,
        resultFormat: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQsetSingleRowMode(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsetChunkedRowsMode(conn: *mut PGconn, chunkSize: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQgetResult(conn: *mut PGconn) -> *mut PGresult;
}
extern "C" {
    pub fn PQisBusy(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQconsumeInput(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQenterPipelineMode(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQexitPipelineMode(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQpipelineSync(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsendFlushRequest(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsendPipelineSync(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQnotifies(conn: *mut PGconn) -> *mut PGnotify;
}
extern "C" {
    pub fn PQputCopyData(
        conn: *mut PGconn,
        buffer: *const libc::c_char,
        nbytes: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQputCopyEnd(conn: *mut PGconn, errormsg: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQgetCopyData(
        conn: *mut PGconn,
        buffer: *mut *mut libc::c_char,
        async_: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQgetline(
        conn: *mut PGconn,
        buffer: *mut libc::c_char,
        length: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQputline(conn: *mut PGconn, string: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQgetlineAsync(
        conn: *mut PGconn,
        buffer: *mut libc::c_char,
        bufsize: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQputnbytes(
        conn: *mut PGconn,
        buffer: *const libc::c_char,
        nbytes: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQendcopy(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQsetnonblocking(conn: *mut PGconn, arg: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQisnonblocking(conn: *const PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQisthreadsafe() -> libc::c_int;
}
extern "C" {
    pub fn PQping(conninfo: *const libc::c_char) -> PGPing;
}
extern "C" {
    pub fn PQpingParams(
        keywords: *const *const libc::c_char,
        values: *const *const libc::c_char,
        expand_dbname: libc::c_int,
    ) -> PGPing;
}
extern "C" {
    pub fn PQflush(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn PQfn(
        conn: *mut PGconn,
        fnid: libc::c_int,
        result_buf: *mut libc::c_int,
        result_len: *mut libc::c_int,
        result_is_int: libc::c_int,
        args: *const PQArgBlock,
        nargs: libc::c_int,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn PQresultStatus(res: *const PGresult) -> ExecStatusType;
}
extern "C" {
    pub fn PQresStatus(status: ExecStatusType) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQresultErrorMessage(res: *const PGresult) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQresultVerboseErrorMessage(
        res: *const PGresult,
        verbosity: PGVerbosity,
        show_context: PGContextVisibility,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQresultErrorField(res: *const PGresult, fieldcode: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQntuples(res: *const PGresult) -> libc::c_int;
}
extern "C" {
    pub fn PQnfields(res: *const PGresult) -> libc::c_int;
}
extern "C" {
    pub fn PQbinaryTuples(res: *const PGresult) -> libc::c_int;
}
extern "C" {
    pub fn PQfname(res: *const PGresult, field_num: libc::c_int) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQfnumber(res: *const PGresult, field_name: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQftable(res: *const PGresult, field_num: libc::c_int) -> Oid;
}
extern "C" {
    pub fn PQftablecol(res: *const PGresult, field_num: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQfformat(res: *const PGresult, field_num: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQftype(res: *const PGresult, field_num: libc::c_int) -> Oid;
}
extern "C" {
    pub fn PQfsize(res: *const PGresult, field_num: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQfmod(res: *const PGresult, field_num: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQcmdStatus(res: *mut PGresult) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQoidStatus(res: *const PGresult) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQoidValue(res: *const PGresult) -> Oid;
}
extern "C" {
    pub fn PQcmdTuples(res: *mut PGresult) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQgetvalue(
        res: *const PGresult,
        tup_num: libc::c_int,
        field_num: libc::c_int,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQgetlength(
        res: *const PGresult,
        tup_num: libc::c_int,
        field_num: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQgetisnull(
        res: *const PGresult,
        tup_num: libc::c_int,
        field_num: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQnparams(res: *const PGresult) -> libc::c_int;
}
extern "C" {
    pub fn PQparamtype(res: *const PGresult, param_num: libc::c_int) -> Oid;
}
extern "C" {
    pub fn PQdescribePrepared(conn: *mut PGconn, stmt: *const libc::c_char) -> *mut PGresult;
}
extern "C" {
    pub fn PQdescribePortal(conn: *mut PGconn, portal: *const libc::c_char) -> *mut PGresult;
}
extern "C" {
    pub fn PQsendDescribePrepared(conn: *mut PGconn, stmt: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQsendDescribePortal(conn: *mut PGconn, portal: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQclosePrepared(conn: *mut PGconn, stmt: *const libc::c_char) -> *mut PGresult;
}
extern "C" {
    pub fn PQclosePortal(conn: *mut PGconn, portal: *const libc::c_char) -> *mut PGresult;
}
extern "C" {
    pub fn PQsendClosePrepared(conn: *mut PGconn, stmt: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQsendClosePortal(conn: *mut PGconn, portal: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQclear(res: *mut PGresult);
}
extern "C" {
    pub fn PQfreemem(ptr: *mut libc::c_void);
}
extern "C" {
    pub fn PQmakeEmptyPGresult(conn: *mut PGconn, status: ExecStatusType) -> *mut PGresult;
}
extern "C" {
    pub fn PQcopyResult(src: *const PGresult, flags: libc::c_int) -> *mut PGresult;
}
extern "C" {
    pub fn PQsetResultAttrs(
        res: *mut PGresult,
        numAttributes: libc::c_int,
        attDescs: *mut PGresAttDesc,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQresultAlloc(res: *mut PGresult, nBytes: usize) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQresultMemorySize(res: *const PGresult) -> usize;
}
extern "C" {
    pub fn PQsetvalue(
        res: *mut PGresult,
        tup_num: libc::c_int,
        field_num: libc::c_int,
        value: *mut libc::c_char,
        len: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQescapeStringConn(
        conn: *mut PGconn,
        to: *mut libc::c_char,
        from: *const libc::c_char,
        length: usize,
        error: *mut libc::c_int,
    ) -> usize;
}
extern "C" {
    pub fn PQescapeLiteral(
        conn: *mut PGconn,
        str_: *const libc::c_char,
        len: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQescapeIdentifier(
        conn: *mut PGconn,
        str_: *const libc::c_char,
        len: usize,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQescapeByteaConn(
        conn: *mut PGconn,
        from: *const libc::c_uchar,
        from_length: usize,
        to_length: *mut usize,
    ) -> *mut libc::c_uchar;
}
extern "C" {
    pub fn PQunescapeBytea(
        strtext: *const libc::c_uchar,
        retbuflen: *mut usize,
    ) -> *mut libc::c_uchar;
}
extern "C" {
    pub fn PQescapeString(to: *mut libc::c_char, from: *const libc::c_char, length: usize)
        -> usize;
}
extern "C" {
    pub fn PQescapeBytea(
        from: *const libc::c_uchar,
        from_length: usize,
        to_length: *mut usize,
    ) -> *mut libc::c_uchar;
}
extern "C" {
    pub fn PQprint(fout: *mut FILE, res: *const PGresult, po: *const PQprintOpt);
}
extern "C" {
    pub fn PQdisplayTuples(
        res: *const PGresult,
        fp: *mut FILE,
        fillAlign: libc::c_int,
        fieldSep: *const libc::c_char,
        printHeader: libc::c_int,
        quiet: libc::c_int,
    );
}
extern "C" {
    pub fn PQprintTuples(
        res: *const PGresult,
        fout: *mut FILE,
        PrintAttNames: libc::c_int,
        TerseOutput: libc::c_int,
        colWidth: libc::c_int,
    );
}
extern "C" {
    pub fn lo_open(conn: *mut PGconn, lobjId: Oid, mode: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn lo_close(conn: *mut PGconn, fd: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn lo_read(
        conn: *mut PGconn,
        fd: libc::c_int,
        buf: *mut libc::c_char,
        len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn lo_write(
        conn: *mut PGconn,
        fd: libc::c_int,
        buf: *const libc::c_char,
        len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn lo_lseek(
        conn: *mut PGconn,
        fd: libc::c_int,
        offset: libc::c_int,
        whence: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn lo_lseek64(
        conn: *mut PGconn,
        fd: libc::c_int,
        offset: pg_int64,
        whence: libc::c_int,
    ) -> pg_int64;
}
extern "C" {
    pub fn lo_creat(conn: *mut PGconn, mode: libc::c_int) -> Oid;
}
extern "C" {
    pub fn lo_create(conn: *mut PGconn, lobjId: Oid) -> Oid;
}
extern "C" {
    pub fn lo_tell(conn: *mut PGconn, fd: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn lo_tell64(conn: *mut PGconn, fd: libc::c_int) -> pg_int64;
}
extern "C" {
    pub fn lo_truncate(conn: *mut PGconn, fd: libc::c_int, len: usize) -> libc::c_int;
}
extern "C" {
    pub fn lo_truncate64(conn: *mut PGconn, fd: libc::c_int, len: pg_int64) -> libc::c_int;
}
extern "C" {
    pub fn lo_unlink(conn: *mut PGconn, lobjId: Oid) -> libc::c_int;
}
extern "C" {
    pub fn lo_import(conn: *mut PGconn, filename: *const libc::c_char) -> Oid;
}
extern "C" {
    pub fn lo_import_with_oid(conn: *mut PGconn, filename: *const libc::c_char, lobjId: Oid)
        -> Oid;
}
extern "C" {
    pub fn lo_export(conn: *mut PGconn, lobjId: Oid, filename: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn PQlibVersion() -> libc::c_int;
}
extern "C" {
    pub fn PQsocketPoll(
        sock: libc::c_int,
        forRead: libc::c_int,
        forWrite: libc::c_int,
        end_time: time_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQmblen(s: *const libc::c_char, encoding: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQmblenBounded(s: *const libc::c_char, encoding: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQdsplen(s: *const libc::c_char, encoding: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn PQenv2encoding() -> libc::c_int;
}
extern "C" {
    pub fn PQencryptPassword(
        passwd: *const libc::c_char,
        user: *const libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQencryptPasswordConn(
        conn: *mut PGconn,
        passwd: *const libc::c_char,
        user: *const libc::c_char,
        algorithm: *const libc::c_char,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn PQchangePassword(
        conn: *mut PGconn,
        user: *const libc::c_char,
        passwd: *const libc::c_char,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn pg_char_to_encoding(name: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pg_encoding_to_char(encoding: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn pg_valid_server_encoding_id(encoding: libc::c_int) -> libc::c_int;
}
pub type PQsslKeyPassHook_OpenSSL_type = ::core::option::Option<
    unsafe extern "C" fn(
        buf: *mut libc::c_char,
        size: libc::c_int,
        conn: *mut PGconn,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn PQgetSSLKeyPassHook_OpenSSL() -> PQsslKeyPassHook_OpenSSL_type;
}
extern "C" {
    pub fn PQsetSSLKeyPassHook_OpenSSL(hook: PQsslKeyPassHook_OpenSSL_type);
}
extern "C" {
    pub fn PQdefaultSSLKeyPassHook_OpenSSL(
        buf: *mut libc::c_char,
        size: libc::c_int,
        conn: *mut PGconn,
    ) -> libc::c_int;
}
pub const PGEVT_REGISTER: PGEventId = 0;
pub const PGEVT_CONNRESET: PGEventId = 1;
pub const PGEVT_CONNDESTROY: PGEventId = 2;
pub const PGEVT_RESULTCREATE: PGEventId = 3;
pub const PGEVT_RESULTCOPY: PGEventId = 4;
pub const PGEVT_RESULTDESTROY: PGEventId = 5;
pub type PGEventId = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventRegister {
    pub conn: *mut PGconn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventConnReset {
    pub conn: *mut PGconn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventConnDestroy {
    pub conn: *mut PGconn,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventResultCreate {
    pub conn: *mut PGconn,
    pub result: *mut PGresult,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventResultCopy {
    pub src: *const PGresult,
    pub dest: *mut PGresult,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEventResultDestroy {
    pub result: *mut PGresult,
}
pub type PGEventProc = ::core::option::Option<
    unsafe extern "C" fn(
        evtId: PGEventId,
        evtInfo: *mut libc::c_void,
        passThrough: *mut libc::c_void,
    ) -> libc::c_int,
>;
extern "C" {
    pub fn PQregisterEventProc(
        conn: *mut PGconn,
        proc_: PGEventProc,
        name: *const libc::c_char,
        passThrough: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQsetInstanceData(
        conn: *mut PGconn,
        proc_: PGEventProc,
        data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQinstanceData(conn: *const PGconn, proc_: PGEventProc) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQresultSetInstanceData(
        result: *mut PGresult,
        proc_: PGEventProc,
        data: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn PQresultInstanceData(result: *const PGresult, proc_: PGEventProc) -> *mut libc::c_void;
}
extern "C" {
    pub fn PQfireResultCreateEvents(conn: *mut PGconn, res: *mut PGresult) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut libc::c_void,
    pub iov_len: usize,
}
pub type socklen_t = __socklen_t;
pub const SOCK_STREAM: __socket_type = 1;
pub const SOCK_DGRAM: __socket_type = 2;
pub const SOCK_RAW: __socket_type = 3;
pub const SOCK_RDM: __socket_type = 4;
pub const SOCK_SEQPACKET: __socket_type = 5;
pub const SOCK_DCCP: __socket_type = 6;
pub const SOCK_PACKET: __socket_type = 10;
pub const SOCK_CLOEXEC: __socket_type = 524288;
pub const SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = libc::c_uint;
pub type sa_family_t = libc::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [libc::c_char; 14usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [libc::c_char; 118usize],
    pub __ss_align: libc::c_ulong,
}
pub const MSG_OOB: _bindgen_ty_12 = 1;
pub const MSG_PEEK: _bindgen_ty_12 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_12 = 4;
pub const MSG_CTRUNC: _bindgen_ty_12 = 8;
pub const MSG_PROXY: _bindgen_ty_12 = 16;
pub const MSG_TRUNC: _bindgen_ty_12 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_12 = 64;
pub const MSG_EOR: _bindgen_ty_12 = 128;
pub const MSG_WAITALL: _bindgen_ty_12 = 256;
pub const MSG_FIN: _bindgen_ty_12 = 512;
pub const MSG_SYN: _bindgen_ty_12 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_12 = 2048;
pub const MSG_RST: _bindgen_ty_12 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_12 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_12 = 16384;
pub const MSG_MORE: _bindgen_ty_12 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_12 = 65536;
pub const MSG_BATCH: _bindgen_ty_12 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_12 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_12 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_12 = 1073741824;
pub type _bindgen_ty_12 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut libc::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut libc::c_void,
    pub msg_controllen: usize,
    pub msg_flags: libc::c_int,
}
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: libc::c_int,
    pub cmsg_type: libc::c_int,
    pub __cmsg_data: __IncompleteArrayField<libc::c_uchar>,
}
extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_13 = 1;
pub type _bindgen_ty_13 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [libc::c_ulong; 16usize],
}
pub type __kernel_sighandler_t = ::core::option::Option<unsafe extern "C" fn(arg1: libc::c_int)>;
pub type __kernel_key_t = libc::c_int;
pub type __kernel_mqd_t = libc::c_int;
pub type __kernel_old_uid_t = libc::c_ushort;
pub type __kernel_old_gid_t = libc::c_ushort;
pub type __kernel_old_dev_t = libc::c_ulong;
pub type __kernel_long_t = libc::c_long;
pub type __kernel_ulong_t = libc::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = libc::c_uint;
pub type __kernel_pid_t = libc::c_int;
pub type __kernel_ipc_pid_t = libc::c_int;
pub type __kernel_uid_t = libc::c_uint;
pub type __kernel_gid_t = libc::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = libc::c_int;
pub type __kernel_uid32_t = libc::c_uint;
pub type __kernel_gid32_t = libc::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [libc::c_int; 2usize],
}
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = libc::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = libc::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = libc::c_int;
pub type __kernel_clockid_t = libc::c_int;
pub type __kernel_caddr_t = *mut libc::c_char;
pub type __kernel_uid16_t = libc::c_ushort;
pub type __kernel_gid16_t = libc::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: libc::c_int,
    pub l_linger: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: libc::c_ushort,
    pub sa_data: [libc::c_uchar; 14usize],
}
pub const SHUT_RD: _bindgen_ty_14 = 0;
pub const SHUT_WR: _bindgen_ty_14 = 1;
pub const SHUT_RDWR: _bindgen_ty_14 = 2;
pub type _bindgen_ty_14 = libc::c_uint;
extern "C" {
    pub fn socket(
        __domain: libc::c_int,
        __type: libc::c_int,
        __protocol: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn socketpair(
        __domain: libc::c_int,
        __type: libc::c_int,
        __protocol: libc::c_int,
        __fds: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn bind(__fd: libc::c_int, __addr: *const sockaddr, __len: socklen_t) -> libc::c_int;
}
extern "C" {
    pub fn getsockname(
        __fd: libc::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn connect(__fd: libc::c_int, __addr: *const sockaddr, __len: socklen_t) -> libc::c_int;
}
extern "C" {
    pub fn getpeername(
        __fd: libc::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn send(
        __fd: libc::c_int,
        __buf: *const libc::c_void,
        __n: usize,
        __flags: libc::c_int,
    ) -> isize;
}
extern "C" {
    pub fn recv(
        __fd: libc::c_int,
        __buf: *mut libc::c_void,
        __n: usize,
        __flags: libc::c_int,
    ) -> isize;
}
extern "C" {
    pub fn sendto(
        __fd: libc::c_int,
        __buf: *const libc::c_void,
        __n: usize,
        __flags: libc::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn recvfrom(
        __fd: libc::c_int,
        __buf: *mut libc::c_void,
        __n: usize,
        __flags: libc::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
extern "C" {
    pub fn sendmsg(__fd: libc::c_int, __message: *const msghdr, __flags: libc::c_int) -> isize;
}
extern "C" {
    pub fn recvmsg(__fd: libc::c_int, __message: *mut msghdr, __flags: libc::c_int) -> isize;
}
extern "C" {
    pub fn getsockopt(
        __fd: libc::c_int,
        __level: libc::c_int,
        __optname: libc::c_int,
        __optval: *mut libc::c_void,
        __optlen: *mut socklen_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn setsockopt(
        __fd: libc::c_int,
        __level: libc::c_int,
        __optname: libc::c_int,
        __optval: *const libc::c_void,
        __optlen: socklen_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn listen(__fd: libc::c_int, __n: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn accept(
        __fd: libc::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn shutdown(__fd: libc::c_int, __how: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sockatmark(__fd: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn isfdtype(__fd: libc::c_int, __fdtype: libc::c_int) -> libc::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [libc::c_char; 40usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: libc::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
pub const IPPROTO_IP: _bindgen_ty_15 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_15 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_15 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_15 = 4;
pub const IPPROTO_TCP: _bindgen_ty_15 = 6;
pub const IPPROTO_EGP: _bindgen_ty_15 = 8;
pub const IPPROTO_PUP: _bindgen_ty_15 = 12;
pub const IPPROTO_UDP: _bindgen_ty_15 = 17;
pub const IPPROTO_IDP: _bindgen_ty_15 = 22;
pub const IPPROTO_TP: _bindgen_ty_15 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_15 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_15 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_15 = 46;
pub const IPPROTO_GRE: _bindgen_ty_15 = 47;
pub const IPPROTO_ESP: _bindgen_ty_15 = 50;
pub const IPPROTO_AH: _bindgen_ty_15 = 51;
pub const IPPROTO_MTP: _bindgen_ty_15 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_15 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_15 = 98;
pub const IPPROTO_PIM: _bindgen_ty_15 = 103;
pub const IPPROTO_COMP: _bindgen_ty_15 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_15 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_15 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_15 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_15 = 143;
pub const IPPROTO_RAW: _bindgen_ty_15 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_15 = 262;
pub const IPPROTO_MAX: _bindgen_ty_15 = 263;
pub type _bindgen_ty_15 = libc::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_16 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_16 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_16 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_16 = 58;
pub const IPPROTO_NONE: _bindgen_ty_16 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_16 = 60;
pub const IPPROTO_MH: _bindgen_ty_16 = 135;
pub type _bindgen_ty_16 = libc::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_17 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_17 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_17 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_17 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_17 = 15;
pub const IPPORT_FTP: _bindgen_ty_17 = 21;
pub const IPPORT_TELNET: _bindgen_ty_17 = 23;
pub const IPPORT_SMTP: _bindgen_ty_17 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_17 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_17 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_17 = 43;
pub const IPPORT_MTP: _bindgen_ty_17 = 57;
pub const IPPORT_TFTP: _bindgen_ty_17 = 69;
pub const IPPORT_RJE: _bindgen_ty_17 = 77;
pub const IPPORT_FINGER: _bindgen_ty_17 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_17 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_17 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_17 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_17 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_17 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_17 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_17 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_17 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_17 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_17 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_17 = 5000;
pub type _bindgen_ty_17 = libc::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
extern "C" {
    pub static in6addr_any: in6_addr;
}
extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [libc::c_uchar; 8usize],
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
extern "C" {
    pub fn bindresvport(__sockfd: libc::c_int, __sock_in: *mut sockaddr_in) -> libc::c_int;
}
extern "C" {
    pub fn bindresvport6(__sockfd: libc::c_int, __sock_in: *mut sockaddr_in6) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct rpcent {
    pub r_name: *mut libc::c_char,
    pub r_aliases: *mut *mut libc::c_char,
    pub r_number: libc::c_int,
}
extern "C" {
    pub fn setrpcent(__stayopen: libc::c_int);
}
extern "C" {
    pub fn endrpcent();
}
extern "C" {
    pub fn getrpcbyname(__name: *const libc::c_char) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbynumber(__number: libc::c_int) -> *mut rpcent;
}
extern "C" {
    pub fn getrpcent() -> *mut rpcent;
}
extern "C" {
    pub fn getrpcbyname_r(
        __name: *const libc::c_char,
        __result_buf: *mut rpcent,
        __buffer: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getrpcbynumber_r(
        __number: libc::c_int,
        __result_buf: *mut rpcent,
        __buffer: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getrpcent_r(
        __result_buf: *mut rpcent,
        __buffer: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut rpcent,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct netent {
    pub n_name: *mut libc::c_char,
    pub n_aliases: *mut *mut libc::c_char,
    pub n_addrtype: libc::c_int,
    pub n_net: u32,
}
extern "C" {
    pub fn __h_errno_location() -> *mut libc::c_int;
}
extern "C" {
    pub fn herror(__str: *const libc::c_char);
}
extern "C" {
    pub fn hstrerror(__err_num: libc::c_int) -> *const libc::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct hostent {
    pub h_name: *mut libc::c_char,
    pub h_aliases: *mut *mut libc::c_char,
    pub h_addrtype: libc::c_int,
    pub h_length: libc::c_int,
    pub h_addr_list: *mut *mut libc::c_char,
}
extern "C" {
    pub fn sethostent(__stay_open: libc::c_int);
}
extern "C" {
    pub fn endhostent();
}
extern "C" {
    pub fn gethostent() -> *mut hostent;
}
extern "C" {
    pub fn gethostbyaddr(
        __addr: *const libc::c_void,
        __len: __socklen_t,
        __type: libc::c_int,
    ) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname(__name: *const libc::c_char) -> *mut hostent;
}
extern "C" {
    pub fn gethostbyname2(__name: *const libc::c_char, __af: libc::c_int) -> *mut hostent;
}
extern "C" {
    pub fn gethostent_r(
        __result_buf: *mut hostent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn gethostbyaddr_r(
        __addr: *const libc::c_void,
        __len: __socklen_t,
        __type: libc::c_int,
        __result_buf: *mut hostent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn gethostbyname_r(
        __name: *const libc::c_char,
        __result_buf: *mut hostent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn gethostbyname2_r(
        __name: *const libc::c_char,
        __af: libc::c_int,
        __result_buf: *mut hostent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut hostent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn setnetent(__stay_open: libc::c_int);
}
extern "C" {
    pub fn endnetent();
}
extern "C" {
    pub fn getnetent() -> *mut netent;
}
extern "C" {
    pub fn getnetbyaddr(__net: u32, __type: libc::c_int) -> *mut netent;
}
extern "C" {
    pub fn getnetbyname(__name: *const libc::c_char) -> *mut netent;
}
extern "C" {
    pub fn getnetent_r(
        __result_buf: *mut netent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getnetbyaddr_r(
        __net: u32,
        __type: libc::c_int,
        __result_buf: *mut netent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getnetbyname_r(
        __name: *const libc::c_char,
        __result_buf: *mut netent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut netent,
        __h_errnop: *mut libc::c_int,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct servent {
    pub s_name: *mut libc::c_char,
    pub s_aliases: *mut *mut libc::c_char,
    pub s_port: libc::c_int,
    pub s_proto: *mut libc::c_char,
}
extern "C" {
    pub fn setservent(__stay_open: libc::c_int);
}
extern "C" {
    pub fn endservent();
}
extern "C" {
    pub fn getservent() -> *mut servent;
}
extern "C" {
    pub fn getservbyname(__name: *const libc::c_char, __proto: *const libc::c_char)
        -> *mut servent;
}
extern "C" {
    pub fn getservbyport(__port: libc::c_int, __proto: *const libc::c_char) -> *mut servent;
}
extern "C" {
    pub fn getservent_r(
        __result_buf: *mut servent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getservbyname_r(
        __name: *const libc::c_char,
        __proto: *const libc::c_char,
        __result_buf: *mut servent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getservbyport_r(
        __port: libc::c_int,
        __proto: *const libc::c_char,
        __result_buf: *mut servent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut servent,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct protoent {
    pub p_name: *mut libc::c_char,
    pub p_aliases: *mut *mut libc::c_char,
    pub p_proto: libc::c_int,
}
extern "C" {
    pub fn setprotoent(__stay_open: libc::c_int);
}
extern "C" {
    pub fn endprotoent();
}
extern "C" {
    pub fn getprotoent() -> *mut protoent;
}
extern "C" {
    pub fn getprotobyname(__name: *const libc::c_char) -> *mut protoent;
}
extern "C" {
    pub fn getprotobynumber(__proto: libc::c_int) -> *mut protoent;
}
extern "C" {
    pub fn getprotoent_r(
        __result_buf: *mut protoent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getprotobyname_r(
        __name: *const libc::c_char,
        __result_buf: *mut protoent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getprotobynumber_r(
        __proto: libc::c_int,
        __result_buf: *mut protoent,
        __buf: *mut libc::c_char,
        __buflen: usize,
        __result: *mut *mut protoent,
    ) -> libc::c_int;
}
extern "C" {
    pub fn setnetgrent(__netgroup: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn endnetgrent();
}
extern "C" {
    pub fn getnetgrent(
        __hostp: *mut *mut libc::c_char,
        __userp: *mut *mut libc::c_char,
        __domainp: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn innetgr(
        __netgroup: *const libc::c_char,
        __host: *const libc::c_char,
        __user: *const libc::c_char,
        __domain: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn getnetgrent_r(
        __hostp: *mut *mut libc::c_char,
        __userp: *mut *mut libc::c_char,
        __domainp: *mut *mut libc::c_char,
        __buffer: *mut libc::c_char,
        __buflen: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn rcmd(
        __ahost: *mut *mut libc::c_char,
        __rport: libc::c_ushort,
        __locuser: *const libc::c_char,
        __remuser: *const libc::c_char,
        __cmd: *const libc::c_char,
        __fd2p: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn rcmd_af(
        __ahost: *mut *mut libc::c_char,
        __rport: libc::c_ushort,
        __locuser: *const libc::c_char,
        __remuser: *const libc::c_char,
        __cmd: *const libc::c_char,
        __fd2p: *mut libc::c_int,
        __af: sa_family_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn rexec(
        __ahost: *mut *mut libc::c_char,
        __rport: libc::c_int,
        __name: *const libc::c_char,
        __pass: *const libc::c_char,
        __cmd: *const libc::c_char,
        __fd2p: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn rexec_af(
        __ahost: *mut *mut libc::c_char,
        __rport: libc::c_int,
        __name: *const libc::c_char,
        __pass: *const libc::c_char,
        __cmd: *const libc::c_char,
        __fd2p: *mut libc::c_int,
        __af: sa_family_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn ruserok(
        __rhost: *const libc::c_char,
        __suser: libc::c_int,
        __remuser: *const libc::c_char,
        __locuser: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn ruserok_af(
        __rhost: *const libc::c_char,
        __suser: libc::c_int,
        __remuser: *const libc::c_char,
        __locuser: *const libc::c_char,
        __af: sa_family_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn iruserok(
        __raddr: u32,
        __suser: libc::c_int,
        __remuser: *const libc::c_char,
        __locuser: *const libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn iruserok_af(
        __raddr: *const libc::c_void,
        __suser: libc::c_int,
        __remuser: *const libc::c_char,
        __locuser: *const libc::c_char,
        __af: sa_family_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn rresvport(__alport: *mut libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn rresvport_af(__alport: *mut libc::c_int, __af: sa_family_t) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct addrinfo {
    pub ai_flags: libc::c_int,
    pub ai_family: libc::c_int,
    pub ai_socktype: libc::c_int,
    pub ai_protocol: libc::c_int,
    pub ai_addrlen: socklen_t,
    pub ai_addr: *mut sockaddr,
    pub ai_canonname: *mut libc::c_char,
    pub ai_next: *mut addrinfo,
}
extern "C" {
    pub fn getaddrinfo(
        __name: *const libc::c_char,
        __service: *const libc::c_char,
        __req: *const addrinfo,
        __pai: *mut *mut addrinfo,
    ) -> libc::c_int;
}
extern "C" {
    pub fn freeaddrinfo(__ai: *mut addrinfo);
}
extern "C" {
    pub fn gai_strerror(__ecode: libc::c_int) -> *const libc::c_char;
}
extern "C" {
    pub fn getnameinfo(
        __sa: *const sockaddr,
        __salen: socklen_t,
        __host: *mut libc::c_char,
        __hostlen: socklen_t,
        __serv: *mut libc::c_char,
        __servlen: socklen_t,
        __flags: libc::c_int,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timezone {
    pub tz_minuteswest: libc::c_int,
    pub tz_dsttime: libc::c_int,
}
extern "C" {
    pub fn gettimeofday(__tv: *mut timeval, __tz: *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn settimeofday(__tv: *const timeval, __tz: *const timezone) -> libc::c_int;
}
extern "C" {
    pub fn adjtime(__delta: *const timeval, __olddelta: *mut timeval) -> libc::c_int;
}
pub const ITIMER_REAL: __itimer_which = 0;
pub const ITIMER_VIRTUAL: __itimer_which = 1;
pub const ITIMER_PROF: __itimer_which = 2;
pub type __itimer_which = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct itimerval {
    pub it_interval: timeval,
    pub it_value: timeval,
}
pub type __itimer_which_t = libc::c_int;
extern "C" {
    pub fn getitimer(__which: __itimer_which_t, __value: *mut itimerval) -> libc::c_int;
}
extern "C" {
    pub fn setitimer(
        __which: __itimer_which_t,
        __new: *const itimerval,
        __old: *mut itimerval,
    ) -> libc::c_int;
}
extern "C" {
    pub fn utimes(__file: *const libc::c_char, __tvp: *const timeval) -> libc::c_int;
}
extern "C" {
    pub fn lutimes(__file: *const libc::c_char, __tvp: *const timeval) -> libc::c_int;
}
extern "C" {
    pub fn futimes(__fd: libc::c_int, __tvp: *const timeval) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sched_param {
    pub sched_priority: libc::c_int,
}
pub type __cpu_mask = libc::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct cpu_set_t {
    pub __bits: [__cpu_mask; 16usize],
}
extern "C" {
    pub fn __sched_cpucount(__setsize: usize, __setp: *const cpu_set_t) -> libc::c_int;
}
extern "C" {
    pub fn __sched_cpualloc(__count: usize) -> *mut cpu_set_t;
}
extern "C" {
    pub fn __sched_cpufree(__set: *mut cpu_set_t);
}
extern "C" {
    pub fn sched_setparam(__pid: __pid_t, __param: *const sched_param) -> libc::c_int;
}
extern "C" {
    pub fn sched_getparam(__pid: __pid_t, __param: *mut sched_param) -> libc::c_int;
}
extern "C" {
    pub fn sched_setscheduler(
        __pid: __pid_t,
        __policy: libc::c_int,
        __param: *const sched_param,
    ) -> libc::c_int;
}
extern "C" {
    pub fn sched_getscheduler(__pid: __pid_t) -> libc::c_int;
}
extern "C" {
    pub fn sched_yield() -> libc::c_int;
}
extern "C" {
    pub fn sched_get_priority_max(__algorithm: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sched_get_priority_min(__algorithm: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut timespec) -> libc::c_int;
}
pub type __jmp_buf = [libc::c_long; 8usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __jmp_buf_tag {
    pub __jmpbuf: __jmp_buf,
    pub __mask_was_saved: libc::c_int,
    pub __saved_mask: __sigset_t,
}
pub const PTHREAD_CREATE_JOINABLE: _bindgen_ty_18 = 0;
pub const PTHREAD_CREATE_DETACHED: _bindgen_ty_18 = 1;
pub type _bindgen_ty_18 = libc::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: _bindgen_ty_19 = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: _bindgen_ty_19 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: _bindgen_ty_19 = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: _bindgen_ty_19 = 3;
pub const PTHREAD_MUTEX_NORMAL: _bindgen_ty_19 = 0;
pub const PTHREAD_MUTEX_RECURSIVE: _bindgen_ty_19 = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: _bindgen_ty_19 = 2;
pub const PTHREAD_MUTEX_DEFAULT: _bindgen_ty_19 = 0;
pub type _bindgen_ty_19 = libc::c_uint;
pub const PTHREAD_MUTEX_STALLED: _bindgen_ty_20 = 0;
pub const PTHREAD_MUTEX_STALLED_NP: _bindgen_ty_20 = 0;
pub const PTHREAD_MUTEX_ROBUST: _bindgen_ty_20 = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: _bindgen_ty_20 = 1;
pub type _bindgen_ty_20 = libc::c_uint;
pub const PTHREAD_PRIO_NONE: _bindgen_ty_21 = 0;
pub const PTHREAD_PRIO_INHERIT: _bindgen_ty_21 = 1;
pub const PTHREAD_PRIO_PROTECT: _bindgen_ty_21 = 2;
pub type _bindgen_ty_21 = libc::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: _bindgen_ty_22 = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: _bindgen_ty_22 = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: _bindgen_ty_22 = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: _bindgen_ty_22 = 0;
pub type _bindgen_ty_22 = libc::c_uint;
pub const PTHREAD_INHERIT_SCHED: _bindgen_ty_23 = 0;
pub const PTHREAD_EXPLICIT_SCHED: _bindgen_ty_23 = 1;
pub type _bindgen_ty_23 = libc::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: _bindgen_ty_24 = 0;
pub const PTHREAD_SCOPE_PROCESS: _bindgen_ty_24 = 1;
pub type _bindgen_ty_24 = libc::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: _bindgen_ty_25 = 0;
pub const PTHREAD_PROCESS_SHARED: _bindgen_ty_25 = 1;
pub type _bindgen_ty_25 = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pthread_cleanup_buffer {
    pub __routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub __arg: *mut libc::c_void,
    pub __canceltype: libc::c_int,
    pub __prev: *mut _pthread_cleanup_buffer,
}
pub const PTHREAD_CANCEL_ENABLE: _bindgen_ty_26 = 0;
pub const PTHREAD_CANCEL_DISABLE: _bindgen_ty_26 = 1;
pub type _bindgen_ty_26 = libc::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: _bindgen_ty_27 = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: _bindgen_ty_27 = 1;
pub type _bindgen_ty_27 = libc::c_uint;
extern "C" {
    pub fn pthread_create(
        __newthread: *mut pthread_t,
        __attr: *const pthread_attr_t,
        __start_routine: ::core::option::Option<
            unsafe extern "C" fn(arg1: *mut libc::c_void) -> *mut libc::c_void,
        >,
        __arg: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_exit(__retval: *mut libc::c_void) -> !;
}
extern "C" {
    pub fn pthread_join(__th: pthread_t, __thread_return: *mut *mut libc::c_void) -> libc::c_int;
}
extern "C" {
    pub fn pthread_detach(__th: pthread_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_self() -> pthread_t;
}
extern "C" {
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getdetachstate(
        __attr: *const pthread_attr_t,
        __detachstate: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setdetachstate(
        __attr: *mut pthread_attr_t,
        __detachstate: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getguardsize(
        __attr: *const pthread_attr_t,
        __guardsize: *mut usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setguardsize(
        __attr: *mut pthread_attr_t,
        __guardsize: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedparam(
        __attr: *const pthread_attr_t,
        __param: *mut sched_param,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedparam(
        __attr: *mut pthread_attr_t,
        __param: *const sched_param,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getschedpolicy(
        __attr: *const pthread_attr_t,
        __policy: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setschedpolicy(
        __attr: *mut pthread_attr_t,
        __policy: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getinheritsched(
        __attr: *const pthread_attr_t,
        __inherit: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setinheritsched(
        __attr: *mut pthread_attr_t,
        __inherit: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getscope(
        __attr: *const pthread_attr_t,
        __scope: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t, __scope: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getstackaddr(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setstackaddr(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut libc::c_void,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getstacksize(
        __attr: *const pthread_attr_t,
        __stacksize: *mut usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setstacksize(
        __attr: *mut pthread_attr_t,
        __stacksize: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_getstack(
        __attr: *const pthread_attr_t,
        __stackaddr: *mut *mut libc::c_void,
        __stacksize: *mut usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_attr_setstack(
        __attr: *mut pthread_attr_t,
        __stackaddr: *mut libc::c_void,
        __stacksize: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_setschedparam(
        __target_thread: pthread_t,
        __policy: libc::c_int,
        __param: *const sched_param,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_getschedparam(
        __target_thread: pthread_t,
        __policy: *mut libc::c_int,
        __param: *mut sched_param,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_setschedprio(__target_thread: pthread_t, __prio: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_once(
        __once_control: *mut pthread_once_t,
        __init_routine: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_setcancelstate(
        __state: libc::c_int,
        __oldstate: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_setcanceltype(__type: libc::c_int, __oldtype: *mut libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cancel(__th: pthread_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_testcancel();
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __cancel_jmp_buf_tag {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: libc::c_int,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_unwind_buf_t {
    pub __cancel_jmp_buf: [__cancel_jmp_buf_tag; 1usize],
    pub __pad: [*mut libc::c_void; 4usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_cleanup_frame {
    pub __cancel_routine: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    pub __cancel_arg: *mut libc::c_void,
    pub __do_it: libc::c_int,
    pub __cancel_type: libc::c_int,
}
extern "C" {
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t);
}
extern "C" {
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> !;
}
extern "C" {
    pub fn __sigsetjmp(__env: *mut __jmp_buf_tag, __savemask: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_init(
        __mutex: *mut pthread_mutex_t,
        __mutexattr: *const pthread_mutexattr_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_timedlock(
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_getprioceiling(
        __mutex: *const pthread_mutex_t,
        __prioceiling: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_setprioceiling(
        __mutex: *mut pthread_mutex_t,
        __prioceiling: libc::c_int,
        __old_ceiling: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getpshared(
        __attr: *const pthread_mutexattr_t,
        __pshared: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setpshared(
        __attr: *mut pthread_mutexattr_t,
        __pshared: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_gettype(
        __attr: *const pthread_mutexattr_t,
        __kind: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_settype(
        __attr: *mut pthread_mutexattr_t,
        __kind: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprotocol(
        __attr: *const pthread_mutexattr_t,
        __protocol: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprotocol(
        __attr: *mut pthread_mutexattr_t,
        __protocol: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getprioceiling(
        __attr: *const pthread_mutexattr_t,
        __prioceiling: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setprioceiling(
        __attr: *mut pthread_mutexattr_t,
        __prioceiling: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_getrobust(
        __attr: *const pthread_mutexattr_t,
        __robustness: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_mutexattr_setrobust(
        __attr: *mut pthread_mutexattr_t,
        __robustness: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_init(
        __rwlock: *mut pthread_rwlock_t,
        __attr: *const pthread_rwlockattr_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedrdlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_timedwrlock(
        __rwlock: *mut pthread_rwlock_t,
        __abstime: *const timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getpshared(
        __attr: *const pthread_rwlockattr_t,
        __pshared: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setpshared(
        __attr: *mut pthread_rwlockattr_t,
        __pshared: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_getkind_np(
        __attr: *const pthread_rwlockattr_t,
        __pref: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_rwlockattr_setkind_np(
        __attr: *mut pthread_rwlockattr_t,
        __pref: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_init(
        __cond: *mut pthread_cond_t,
        __cond_attr: *const pthread_condattr_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_wait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_cond_timedwait(
        __cond: *mut pthread_cond_t,
        __mutex: *mut pthread_mutex_t,
        __abstime: *const timespec,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_getpshared(
        __attr: *const pthread_condattr_t,
        __pshared: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_setpshared(
        __attr: *mut pthread_condattr_t,
        __pshared: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_getclock(
        __attr: *const pthread_condattr_t,
        __clock_id: *mut __clockid_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_condattr_setclock(
        __attr: *mut pthread_condattr_t,
        __clock_id: __clockid_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_spin_init(
        __lock: *mut pthread_spinlock_t,
        __pshared: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrier_init(
        __barrier: *mut pthread_barrier_t,
        __attr: *const pthread_barrierattr_t,
        __count: libc::c_uint,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_getpshared(
        __attr: *const pthread_barrierattr_t,
        __pshared: *mut libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_barrierattr_setpshared(
        __attr: *mut pthread_barrierattr_t,
        __pshared: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_key_create(
        __key: *mut pthread_key_t,
        __destr_function: ::core::option::Option<unsafe extern "C" fn(arg1: *mut libc::c_void)>,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_key_delete(__key: pthread_key_t) -> libc::c_int;
}
extern "C" {
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut libc::c_void;
}
extern "C" {
    pub fn pthread_setspecific(__key: pthread_key_t, __pointer: *const libc::c_void)
        -> libc::c_int;
}
extern "C" {
    pub fn pthread_getcpuclockid(
        __thread_id: pthread_t,
        __clock_id: *mut __clockid_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pthread_atfork(
        __prepare: ::core::option::Option<unsafe extern "C" fn()>,
        __parent: ::core::option::Option<unsafe extern "C" fn()>,
        __child: ::core::option::Option<unsafe extern "C" fn()>,
    ) -> libc::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_un {
    pub sun_family: sa_family_t,
    pub sun_path: [libc::c_char; 108usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SockAddr {
    pub addr: sockaddr_storage,
    pub salen: socklen_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AddrInfo {
    pub family: libc::c_int,
    pub addr: SockAddr,
}
pub type ProtocolVersion = u32;
pub type MsgType = ProtocolVersion;
pub type PacketLen = u32;
pub type AuthRequest = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelRequestPacket {
    pub cancelRequestCode: MsgType,
    pub backendPID: u32,
    pub cancelAuthCode: u32,
}
pub const SASL_COMPLETE: SASLStatus = 0;
pub const SASL_FAILED: SASLStatus = 1;
pub const SASL_CONTINUE: SASLStatus = 2;
pub type SASLStatus = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_fe_sasl_mech {
    pub init: ::core::option::Option<
        unsafe extern "C" fn(
            conn: *mut PGconn,
            password: *const libc::c_char,
            mech: *const libc::c_char,
        ) -> *mut libc::c_void,
    >,
    pub exchange: ::core::option::Option<
        unsafe extern "C" fn(
            state: *mut libc::c_void,
            input: *mut libc::c_char,
            inputlen: libc::c_int,
            output: *mut *mut libc::c_char,
            outputlen: *mut libc::c_int,
        ) -> SASLStatus,
    >,
    pub channel_bound:
        ::core::option::Option<unsafe extern "C" fn(state: *mut libc::c_void) -> bool>,
    pub free: ::core::option::Option<unsafe extern "C" fn(state: *mut libc::c_void)>,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PQExpBufferData {
    pub data: *mut libc::c_char,
    pub len: usize,
    pub maxlen: usize,
}
pub type PQExpBuffer = *mut PQExpBufferData;
extern "C" {
    pub fn createPQExpBuffer() -> PQExpBuffer;
}
extern "C" {
    pub fn initPQExpBuffer(str_: PQExpBuffer);
}
extern "C" {
    pub fn destroyPQExpBuffer(str_: PQExpBuffer);
}
extern "C" {
    pub fn termPQExpBuffer(str_: PQExpBuffer);
}
extern "C" {
    pub fn resetPQExpBuffer(str_: PQExpBuffer);
}
extern "C" {
    pub fn enlargePQExpBuffer(str_: PQExpBuffer, needed: usize) -> libc::c_int;
}
extern "C" {
    pub fn printfPQExpBuffer(str_: PQExpBuffer, fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn appendPQExpBuffer(str_: PQExpBuffer, fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn appendPQExpBufferVA(
        str_: PQExpBuffer,
        fmt: *const libc::c_char,
        args: *mut __va_list_tag,
    ) -> bool;
}
extern "C" {
    pub fn appendPQExpBufferStr(str_: PQExpBuffer, data: *const libc::c_char);
}
extern "C" {
    pub fn appendPQExpBufferChar(str_: PQExpBuffer, ch: libc::c_char);
}
extern "C" {
    pub fn appendBinaryPQExpBuffer(str_: PQExpBuffer, data: *const libc::c_char, datalen: usize);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_prng_state {
    pub s0: u64,
    pub s1: u64,
}
extern "C" {
    pub static mut pg_global_prng_state: pg_prng_state;
}
extern "C" {
    pub fn pg_prng_seed(state: *mut pg_prng_state, seed: u64);
}
extern "C" {
    pub fn pg_prng_fseed(state: *mut pg_prng_state, fseed: f64);
}
extern "C" {
    pub fn pg_prng_seed_check(state: *mut pg_prng_state) -> bool;
}
extern "C" {
    pub fn pg_prng_uint64(state: *mut pg_prng_state) -> u64;
}
extern "C" {
    pub fn pg_prng_uint64_range(state: *mut pg_prng_state, rmin: u64, rmax: u64) -> u64;
}
extern "C" {
    pub fn pg_prng_int64(state: *mut pg_prng_state) -> i64;
}
extern "C" {
    pub fn pg_prng_int64p(state: *mut pg_prng_state) -> i64;
}
extern "C" {
    pub fn pg_prng_int64_range(state: *mut pg_prng_state, rmin: i64, rmax: i64) -> i64;
}
extern "C" {
    pub fn pg_prng_uint32(state: *mut pg_prng_state) -> u32;
}
extern "C" {
    pub fn pg_prng_int32(state: *mut pg_prng_state) -> int32;
}
extern "C" {
    pub fn pg_prng_int32p(state: *mut pg_prng_state) -> int32;
}
extern "C" {
    pub fn pg_prng_double(state: *mut pg_prng_state) -> f64;
}
extern "C" {
    pub fn pg_prng_double_normal(state: *mut pg_prng_state) -> f64;
}
extern "C" {
    pub fn pg_prng_bool(state: *mut pg_prng_state) -> bool;
}
pub type PGresult_data = pgresult_data;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pgresult_data {
    pub next: *mut PGresult_data,
    pub space: [libc::c_char; 1usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgresParamDesc {
    pub typid: Oid,
}
pub type PGresParamDesc = pgresParamDesc;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgresAttValue {
    pub len: libc::c_int,
    pub value: *mut libc::c_char,
}
pub type PGresAttValue = pgresAttValue;
#[repr(C)]
#[derive(Debug)]
pub struct pgMessageField {
    pub next: *mut pgMessageField,
    pub code: libc::c_char,
    pub contents: __IncompleteArrayField<libc::c_char>,
}
pub type PGMessageField = pgMessageField;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGNoticeHooks {
    pub noticeRec: PQnoticeReceiver,
    pub noticeRecArg: *mut libc::c_void,
    pub noticeProc: PQnoticeProcessor,
    pub noticeProcArg: *mut libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGEvent {
    pub proc_: PGEventProc,
    pub name: *mut libc::c_char,
    pub passThrough: *mut libc::c_void,
    pub data: *mut libc::c_void,
    pub resultInitialized: bool,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_result {
    pub ntups: libc::c_int,
    pub numAttributes: libc::c_int,
    pub attDescs: *mut PGresAttDesc,
    pub tuples: *mut *mut PGresAttValue,
    pub tupArrSize: libc::c_int,
    pub numParameters: libc::c_int,
    pub paramDescs: *mut PGresParamDesc,
    pub resultStatus: ExecStatusType,
    pub cmdStatus: [libc::c_char; 64usize],
    pub binary: libc::c_int,
    pub noticeHooks: PGNoticeHooks,
    pub events: *mut PGEvent,
    pub nEvents: libc::c_int,
    pub client_encoding: libc::c_int,
    pub errMsg: *mut libc::c_char,
    pub errFields: *mut PGMessageField,
    pub errQuery: *mut libc::c_char,
    pub null_field: [libc::c_char; 1usize],
    pub curBlock: *mut PGresult_data,
    pub curOffset: libc::c_int,
    pub spaceLeft: libc::c_int,
    pub memorySize: usize,
}
pub const PGASYNC_IDLE: PGAsyncStatusType = 0;
pub const PGASYNC_BUSY: PGAsyncStatusType = 1;
pub const PGASYNC_READY: PGAsyncStatusType = 2;
pub const PGASYNC_READY_MORE: PGAsyncStatusType = 3;
pub const PGASYNC_COPY_IN: PGAsyncStatusType = 4;
pub const PGASYNC_COPY_OUT: PGAsyncStatusType = 5;
pub const PGASYNC_COPY_BOTH: PGAsyncStatusType = 6;
pub const PGASYNC_PIPELINE_IDLE: PGAsyncStatusType = 7;
pub type PGAsyncStatusType = libc::c_uint;
pub const SERVER_TYPE_ANY: PGTargetServerType = 0;
pub const SERVER_TYPE_READ_WRITE: PGTargetServerType = 1;
pub const SERVER_TYPE_READ_ONLY: PGTargetServerType = 2;
pub const SERVER_TYPE_PRIMARY: PGTargetServerType = 3;
pub const SERVER_TYPE_STANDBY: PGTargetServerType = 4;
pub const SERVER_TYPE_PREFER_STANDBY: PGTargetServerType = 5;
pub const SERVER_TYPE_PREFER_STANDBY_PASS2: PGTargetServerType = 6;
pub type PGTargetServerType = libc::c_uint;
pub const LOAD_BALANCE_DISABLE: PGLoadBalanceType = 0;
pub const LOAD_BALANCE_RANDOM: PGLoadBalanceType = 1;
pub type PGLoadBalanceType = libc::c_uint;
pub const PG_BOOL_UNKNOWN: PGTernaryBool = 0;
pub const PG_BOOL_YES: PGTernaryBool = 1;
pub const PG_BOOL_NO: PGTernaryBool = 2;
pub type PGTernaryBool = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PQEnvironmentOption {
    pub envName: *const libc::c_char,
    pub pgName: *const libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgParameterStatus {
    pub next: *mut pgParameterStatus,
    pub name: *mut libc::c_char,
    pub value: *mut libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgLobjfuncs {
    pub fn_lo_open: Oid,
    pub fn_lo_close: Oid,
    pub fn_lo_creat: Oid,
    pub fn_lo_create: Oid,
    pub fn_lo_unlink: Oid,
    pub fn_lo_lseek: Oid,
    pub fn_lo_lseek64: Oid,
    pub fn_lo_tell: Oid,
    pub fn_lo_tell64: Oid,
    pub fn_lo_truncate: Oid,
    pub fn_lo_truncate64: Oid,
    pub fn_lo_read: Oid,
    pub fn_lo_write: Oid,
}
pub type PGlobjfuncs = pgLobjfuncs;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pgDataValue {
    pub len: libc::c_int,
    pub value: *const libc::c_char,
}
pub type PGdataValue = pgDataValue;
pub const CHT_HOST_NAME: pg_conn_host_type = 0;
pub const CHT_HOST_ADDRESS: pg_conn_host_type = 1;
pub const CHT_UNIX_SOCKET: pg_conn_host_type = 2;
pub type pg_conn_host_type = libc::c_uint;
pub const PGQUERY_SIMPLE: PGQueryClass = 0;
pub const PGQUERY_EXTENDED: PGQueryClass = 1;
pub const PGQUERY_PREPARE: PGQueryClass = 2;
pub const PGQUERY_DESCRIBE: PGQueryClass = 3;
pub const PGQUERY_SYNC: PGQueryClass = 4;
pub const PGQUERY_CLOSE: PGQueryClass = 5;
pub type PGQueryClass = libc::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PGcmdQueueEntry {
    pub queryclass: PGQueryClass,
    pub query: *mut libc::c_char,
    pub next: *mut PGcmdQueueEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_conn_host {
    pub type_: pg_conn_host_type,
    pub host: *mut libc::c_char,
    pub hostaddr: *mut libc::c_char,
    pub port: *mut libc::c_char,
    pub password: *mut libc::c_char,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct pg_conn {
    pub pghost: *mut libc::c_char,
    pub pghostaddr: *mut libc::c_char,
    pub pgport: *mut libc::c_char,
    pub connect_timeout: *mut libc::c_char,
    pub pgtcp_user_timeout: *mut libc::c_char,
    pub client_encoding_initial: *mut libc::c_char,
    pub pgoptions: *mut libc::c_char,
    pub appname: *mut libc::c_char,
    pub fbappname: *mut libc::c_char,
    pub dbName: *mut libc::c_char,
    pub replication: *mut libc::c_char,
    pub pguser: *mut libc::c_char,
    pub pgpass: *mut libc::c_char,
    pub pgpassfile: *mut libc::c_char,
    pub channel_binding: *mut libc::c_char,
    pub keepalives: *mut libc::c_char,
    pub keepalives_idle: *mut libc::c_char,
    pub keepalives_interval: *mut libc::c_char,
    pub keepalives_count: *mut libc::c_char,
    pub sslmode: *mut libc::c_char,
    pub sslnegotiation: *mut libc::c_char,
    pub sslcompression: *mut libc::c_char,
    pub sslkey: *mut libc::c_char,
    pub sslcert: *mut libc::c_char,
    pub sslpassword: *mut libc::c_char,
    pub sslcertmode: *mut libc::c_char,
    pub sslrootcert: *mut libc::c_char,
    pub sslcrl: *mut libc::c_char,
    pub sslcrldir: *mut libc::c_char,
    pub sslsni: *mut libc::c_char,
    pub requirepeer: *mut libc::c_char,
    pub gssencmode: *mut libc::c_char,
    pub krbsrvname: *mut libc::c_char,
    pub gsslib: *mut libc::c_char,
    pub gssdelegation: *mut libc::c_char,
    pub ssl_min_protocol_version: *mut libc::c_char,
    pub ssl_max_protocol_version: *mut libc::c_char,
    pub target_session_attrs: *mut libc::c_char,
    pub require_auth: *mut libc::c_char,
    pub load_balance_hosts: *mut libc::c_char,
    pub cancelRequest: bool,
    pub Pfdebug: *mut FILE,
    pub traceFlags: libc::c_int,
    pub noticeHooks: PGNoticeHooks,
    pub events: *mut PGEvent,
    pub nEvents: libc::c_int,
    pub eventArraySize: libc::c_int,
    pub status: ConnStatusType,
    pub asyncStatus: PGAsyncStatusType,
    pub xactStatus: PGTransactionStatusType,
    pub last_sqlstate: [libc::c_char; 6usize],
    pub options_valid: bool,
    pub nonblocking: bool,
    pub pipelineStatus: PGpipelineStatus,
    pub partialResMode: bool,
    pub singleRowMode: bool,
    pub maxChunkSize: libc::c_int,
    pub copy_is_binary: libc::c_char,
    pub copy_already_done: libc::c_int,
    pub notifyHead: *mut PGnotify,
    pub notifyTail: *mut PGnotify,
    pub nconnhost: libc::c_int,
    pub whichhost: libc::c_int,
    pub connhost: *mut pg_conn_host,
    pub connip: *mut libc::c_char,
    pub cmd_queue_head: *mut PGcmdQueueEntry,
    pub cmd_queue_tail: *mut PGcmdQueueEntry,
    pub cmd_queue_recycle: *mut PGcmdQueueEntry,
    pub sock: pgsocket,
    pub laddr: SockAddr,
    pub raddr: SockAddr,
    pub pversion: ProtocolVersion,
    pub sversion: libc::c_int,
    pub auth_req_received: bool,
    pub password_needed: bool,
    pub gssapi_used: bool,
    pub sigpipe_so: bool,
    pub sigpipe_flag: bool,
    pub write_failed: bool,
    pub write_err_msg: *mut libc::c_char,
    pub auth_required: bool,
    pub allowed_auth_methods: u32,
    pub client_finished_auth: bool,
    pub target_server_type: PGTargetServerType,
    pub load_balance_type: PGLoadBalanceType,
    pub try_next_addr: bool,
    pub try_next_host: bool,
    pub naddr: libc::c_int,
    pub whichaddr: libc::c_int,
    pub addr: *mut AddrInfo,
    pub send_appname: bool,
    pub be_pid: libc::c_int,
    pub be_key: libc::c_int,
    pub pstatus: *mut pgParameterStatus,
    pub client_encoding: libc::c_int,
    pub std_strings: bool,
    pub default_transaction_read_only: PGTernaryBool,
    pub in_hot_standby: PGTernaryBool,
    pub verbosity: PGVerbosity,
    pub show_context: PGContextVisibility,
    pub lobjfuncs: *mut PGlobjfuncs,
    pub prng_state: pg_prng_state,
    pub inBuffer: *mut libc::c_char,
    pub inBufSize: libc::c_int,
    pub inStart: libc::c_int,
    pub inCursor: libc::c_int,
    pub inEnd: libc::c_int,
    pub outBuffer: *mut libc::c_char,
    pub outBufSize: libc::c_int,
    pub outCount: libc::c_int,
    pub outMsgStart: libc::c_int,
    pub outMsgEnd: libc::c_int,
    pub rowBuf: *mut PGdataValue,
    pub rowBufLen: libc::c_int,
    pub result: *mut PGresult,
    pub error_result: bool,
    pub saved_result: *mut PGresult,
    pub sasl: *const pg_fe_sasl_mech,
    pub sasl_state: *mut libc::c_void,
    pub scram_sha_256_iterations: libc::c_int,
    pub allowed_enc_methods: uint8,
    pub failed_enc_methods: uint8,
    pub current_enc_method: uint8,
    pub ssl_in_use: bool,
    pub ssl_handshake_started: bool,
    pub ssl_cert_requested: bool,
    pub ssl_cert_sent: bool,
    pub errorMessage: PQExpBufferData,
    pub errorReported: libc::c_int,
    pub workBuffer: PQExpBufferData,
}
extern "C" {
    pub static pgresStatus: [*mut libc::c_char; 0usize];
}
extern "C" {
    pub fn pqDropConnection(conn: *mut PGconn, flushInput: bool);
}
extern "C" {
    pub fn pqConnectOptions2(conn: *mut PGconn) -> bool;
}
extern "C" {
    pub fn pqConnectDBStart(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqConnectDBComplete(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqMakeEmptyPGconn() -> *mut PGconn;
}
extern "C" {
    pub fn pqReleaseConnHosts(conn: *mut PGconn);
}
extern "C" {
    pub fn pqClosePGconn(conn: *mut PGconn);
}
extern "C" {
    pub fn pqPacketSend(
        conn: *mut PGconn,
        pack_type: libc::c_char,
        buf: *const libc::c_void,
        buf_len: usize,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pqGetHomeDirectory(buf: *mut libc::c_char, bufsize: libc::c_int) -> bool;
}
extern "C" {
    pub fn pqCopyPGconn(srcConn: *mut PGconn, dstConn: *mut PGconn) -> bool;
}
extern "C" {
    pub fn pqParseIntParam(
        value: *const libc::c_char,
        result: *mut libc::c_int,
        conn: *mut PGconn,
        context: *const libc::c_char,
    ) -> bool;
}
extern "C" {
    pub static mut pg_g_threadlock: pgthreadlock_t;
}
extern "C" {
    pub fn pqSetResultError(res: *mut PGresult, errorMessage: PQExpBuffer, offset: libc::c_int);
}
extern "C" {
    pub fn pqResultAlloc(res: *mut PGresult, nBytes: usize, isBinary: bool) -> *mut libc::c_void;
}
extern "C" {
    pub fn pqResultStrdup(res: *mut PGresult, str_: *const libc::c_char) -> *mut libc::c_char;
}
extern "C" {
    pub fn pqClearAsyncResult(conn: *mut PGconn);
}
extern "C" {
    pub fn pqSaveErrorResult(conn: *mut PGconn);
}
extern "C" {
    pub fn pqPrepareAsyncResult(conn: *mut PGconn) -> *mut PGresult;
}
extern "C" {
    pub fn pqInternalNotice(hooks: *const PGNoticeHooks, fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn pqSaveMessageField(res: *mut PGresult, code: libc::c_char, value: *const libc::c_char);
}
extern "C" {
    pub fn pqSaveParameterStatus(
        conn: *mut PGconn,
        name: *const libc::c_char,
        value: *const libc::c_char,
    );
}
extern "C" {
    pub fn pqRowProcessor(conn: *mut PGconn, errmsgp: *mut *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pqCommandQueueAdvance(conn: *mut PGconn, isReadyForQuery: bool, gotSync: bool);
}
extern "C" {
    pub fn PQsendQueryContinue(conn: *mut PGconn, query: *const libc::c_char) -> libc::c_int;
}
extern "C" {
    pub fn pqBuildStartupPacket3(
        conn: *mut PGconn,
        packetlen: *mut libc::c_int,
        options: *const PQEnvironmentOption,
    ) -> *mut libc::c_char;
}
extern "C" {
    pub fn pqParseInput3(conn: *mut PGconn);
}
extern "C" {
    pub fn pqGetErrorNotice3(conn: *mut PGconn, isError: bool) -> libc::c_int;
}
extern "C" {
    pub fn pqBuildErrorMessage3(
        msg: PQExpBuffer,
        res: *const PGresult,
        verbosity: PGVerbosity,
        show_context: PGContextVisibility,
    );
}
extern "C" {
    pub fn pqGetNegotiateProtocolVersion3(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGetCopyData3(
        conn: *mut PGconn,
        buffer: *mut *mut libc::c_char,
        async_: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pqGetline3(conn: *mut PGconn, s: *mut libc::c_char, maxlen: libc::c_int) -> libc::c_int;
}
extern "C" {
    pub fn pqGetlineAsync3(
        conn: *mut PGconn,
        buffer: *mut libc::c_char,
        bufsize: libc::c_int,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pqEndcopy3(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqFunctionCall3(
        conn: *mut PGconn,
        fnid: Oid,
        result_buf: *mut libc::c_int,
        actual_result_len: *mut libc::c_int,
        result_is_int: libc::c_int,
        args: *const PQArgBlock,
        nargs: libc::c_int,
    ) -> *mut PGresult;
}
extern "C" {
    pub fn pqCheckOutBufferSpace(bytes_needed: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqCheckInBufferSpace(bytes_needed: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGetc(result: *mut libc::c_char, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPutc(c: libc::c_char, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGets(buf: PQExpBuffer, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGets_append(buf: PQExpBuffer, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPuts(s: *const libc::c_char, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGetnchar(s: *mut libc::c_char, len: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqSkipnchar(len: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPutnchar(s: *const libc::c_char, len: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqGetInt(result: *mut libc::c_int, bytes: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPutInt(value: libc::c_int, bytes: usize, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPutMsgStart(msg_type: libc::c_char, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqPutMsgEnd(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqReadData(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqFlush(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqWait(forRead: libc::c_int, forWrite: libc::c_int, conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqWaitTimed(
        forRead: libc::c_int,
        forWrite: libc::c_int,
        conn: *mut PGconn,
        finish_time: time_t,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pqReadReady(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqWriteReady(conn: *mut PGconn) -> libc::c_int;
}
extern "C" {
    pub fn pqsecure_initialize(arg1: *mut PGconn, arg2: bool, arg3: bool) -> libc::c_int;
}
extern "C" {
    pub fn pqsecure_open_client(arg1: *mut PGconn) -> PostgresPollingStatusType;
}
extern "C" {
    pub fn pqsecure_close(arg1: *mut PGconn);
}
extern "C" {
    pub fn pqsecure_read(arg1: *mut PGconn, ptr: *mut libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pqsecure_write(arg1: *mut PGconn, ptr: *const libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pqsecure_raw_read(arg1: *mut PGconn, ptr: *mut libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pqsecure_raw_write(arg1: *mut PGconn, ptr: *const libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pq_block_sigpipe(osigset: *mut sigset_t, sigpipe_pending: *mut bool) -> libc::c_int;
}
extern "C" {
    pub fn pq_reset_sigpipe(osigset: *mut sigset_t, sigpipe_pending: bool, got_epipe: bool);
}
extern "C" {
    pub fn pgtls_init_library(do_ssl: bool, do_crypto: libc::c_int);
}
extern "C" {
    pub fn pgtls_init(conn: *mut PGconn, do_ssl: bool, do_crypto: bool) -> libc::c_int;
}
extern "C" {
    pub fn pgtls_open_client(conn: *mut PGconn) -> PostgresPollingStatusType;
}
extern "C" {
    pub fn pgtls_close(conn: *mut PGconn);
}
extern "C" {
    pub fn pgtls_read(conn: *mut PGconn, ptr: *mut libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pgtls_read_pending(conn: *mut PGconn) -> bool;
}
extern "C" {
    pub fn pgtls_write(conn: *mut PGconn, ptr: *const libc::c_void, len: usize) -> isize;
}
extern "C" {
    pub fn pgtls_get_peer_certificate_hash(conn: *mut PGconn, len: *mut usize)
        -> *mut libc::c_char;
}
extern "C" {
    pub fn pgtls_verify_peer_name_matches_certificate_guts(
        conn: *mut PGconn,
        names_examined: *mut libc::c_int,
        first_name: *mut *mut libc::c_char,
    ) -> libc::c_int;
}
extern "C" {
    pub fn pqTraceOutputMessage(conn: *mut PGconn, message: *const libc::c_char, toServer: bool);
}
extern "C" {
    pub fn pqTraceOutputNoTypeByteMessage(conn: *mut PGconn, message: *const libc::c_char);
}
extern "C" {
    pub fn libpq_append_error(errorMessage: PQExpBuffer, fmt: *const libc::c_char, ...);
}
extern "C" {
    pub fn libpq_append_conn_error(conn: *mut PGconn, fmt: *const libc::c_char, ...);
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: libc::c_uint,
    pub fp_offset: libc::c_uint,
    pub overflow_arg_area: *mut libc::c_void,
    pub reg_save_area: *mut libc::c_void,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
