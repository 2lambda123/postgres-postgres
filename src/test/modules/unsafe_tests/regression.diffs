diff -U3 /Users/kenaniah/workspace/postgres/src/test/modules/unsafe_tests/expected/role_membership.out /Users/kenaniah/workspace/postgres/src/test/modules/unsafe_tests/results/role_membership.out
--- /Users/kenaniah/workspace/postgres/src/test/modules/unsafe_tests/expected/role_membership.out	2021-10-16 12:32:06.000000000 -0700
+++ /Users/kenaniah/workspace/postgres/src/test/modules/unsafe_tests/results/role_membership.out	2021-10-16 13:30:40.000000000 -0700
@@ -22,14 +22,21 @@
 CREATE ROLE role_a;
 CREATE ROLE role_b;
 CREATE ROLE role_c;
+CREATE ROLE role_d;
+CREATE ROLE role_e NOINHERIT;
+\connect template1
+CREATE TABLE data AS SELECT generate_series(1, 3);
 CREATE DATABASE role_membership_test1;
 CREATE DATABASE role_membership_test2;
 CREATE DATABASE role_membership_test3;
 CREATE DATABASE role_membership_test4;
 -- Initial GRANT statements
 GRANT pg_read_all_data TO role_a WITH ADMIN OPTION;
-GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test2;
-\connect role_membership_test3 role_admin
+GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test1;
+GRANT role_a TO role_d IN DATABASE role_membership_test1;
+GRANT role_a TO role_e;
+GRANT role_a TO role_e IN DATABASE role_membership_test1;
+\connect role_membership_test2 role_admin
 GRANT pg_read_all_data TO role_b IN CURRENT DATABASE;
 GRANT pg_read_all_data TO role_c IN CURRENT DATABASE WITH ADMIN OPTION;
 GRANT pg_read_all_data TO role_c IN DATABASE role_membership_test4 GRANTED BY role_a;
@@ -38,23 +45,111 @@
        role       | member |  grantor   | admin_option |        datname        
 ------------------+--------+------------+--------------+-----------------------
  pg_read_all_data | role_a | role_admin | t            | 
+ pg_read_all_data | role_b | role_admin | f            | role_membership_test1
  pg_read_all_data | role_b | role_admin | f            | role_membership_test2
- pg_read_all_data | role_b | role_admin | f            | role_membership_test3
- pg_read_all_data | role_c | role_admin | t            | role_membership_test3
+ pg_read_all_data | role_c | role_admin | t            | role_membership_test2
  pg_read_all_data | role_c | role_a     | f            | role_membership_test4
-(5 rows)
+ role_a           | role_d | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | 
+(8 rows)
 
 -- Ensure GRANT warning messages for duplicate grants
-GRANT pg_read_all_data TO role_a;
+GRANT pg_read_all_data TO role_a; -- warn
 NOTICE:  role "role_a" is already a member of role "pg_read_all_data"
-GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test3;
-NOTICE:  role "role_b" is already a member of role "pg_read_all_data" in database "role_membership_test3"
--- Ensure with admin option can still be granted without warning
-GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test2 WITH ADMIN OPTION;
-GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test2 WITH ADMIN OPTION;
+GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test2; -- warn
 NOTICE:  role "role_b" is already a member of role "pg_read_all_data" in database "role_membership_test2"
-GRANT pg_read_all_data TO role_c IN DATABASE role_membership_test3 WITH ADMIN OPTION;
-NOTICE:  role "role_c" is already a member of role "pg_read_all_data" in database "role_membership_test3"
+-- Ensure with admin option can still be granted without warning
+GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test3 WITH ADMIN OPTION; -- silent
+GRANT pg_read_all_data TO role_b IN DATABASE role_membership_test3 WITH ADMIN OPTION; -- warn
+NOTICE:  role "role_b" is already a member of role "pg_read_all_data" in database "role_membership_test3"
+GRANT pg_read_all_data TO role_d IN DATABASE role_membership_test4 WITH ADMIN OPTION; -- silent
+SELECT * FROM check_memberships();
+       role       | member |  grantor   | admin_option |        datname        
+------------------+--------+------------+--------------+-----------------------
+ pg_read_all_data | role_a | role_admin | t            | 
+ pg_read_all_data | role_b | role_admin | f            | role_membership_test1
+ pg_read_all_data | role_b | role_admin | f            | role_membership_test2
+ pg_read_all_data | role_b | role_admin | t            | role_membership_test3
+ pg_read_all_data | role_c | role_admin | t            | role_membership_test2
+ pg_read_all_data | role_c | role_a     | f            | role_membership_test4
+ pg_read_all_data | role_d | role_admin | t            | role_membership_test4
+ role_a           | role_d | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | 
+(10 rows)
+
+-- Test membership privileges
+\connect role_membership_test1
+SET ROLE role_a;
+SELECT * FROM data; -- success (read-all cluster-wide)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_b;
+SELECT * FROM data; -- success (read-all in database)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_c;
+SELECT * FROM data; -- error (not granted)
+ERROR:  permission denied for table data
+SET ROLE role_d;
+SELECT * FROM data; -- success (inherited from role_a)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_e;
+SELECT * FROM data; -- error (no inherit)
+ERROR:  permission denied for table data
+\connect role_membership_test2;
+SET ROLE role_a;
+SELECT * FROM data; -- success (read-all cluster-wide)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_b;
+SELECT * FROM data; -- success (read-all in database)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_c;
+SELECT * FROM data; -- success (read-all in database)
+ generate_series 
+-----------------
+               1
+               2
+               3
+(3 rows)
+
+SET ROLE role_d;
+SELECT * FROM data; -- error (not granted)
+ERROR:  permission denied for table data
+SET ROLE role_e;
+SELECT * FROM data; -- error (no inherit)
+ERROR:  permission denied for table data
+-- Ensure ADMIN OPTION can grant cluster-wide and within any DB if cluster-wide
+-- Ensure ADMIN OPTION can grant only within same db if database-specific
 -- test GRANT works
 -- test REVOKE works
 -- test grant error (pre-existing)
@@ -65,15 +160,21 @@
 -- test set session authorization
 -- test set session role
 -- test membership privileges
--- test drop database cleanup
--- should deny database-specific grants for superuser roles?
+-- Ensure that DROP DATABASE cleans up the relevant memberships
+\connect postgres role_admin
+DROP DATABASE role_membership_test3;
 SELECT * FROM check_memberships();
        role       | member |  grantor   | admin_option |        datname        
 ------------------+--------+------------+--------------+-----------------------
  pg_read_all_data | role_a | role_admin | t            | 
- pg_read_all_data | role_b | role_admin | t            | role_membership_test2
- pg_read_all_data | role_b | role_admin | f            | role_membership_test3
- pg_read_all_data | role_c | role_admin | t            | role_membership_test3
+ pg_read_all_data | role_b | role_admin | f            | role_membership_test1
+ pg_read_all_data | role_b | role_admin | f            | role_membership_test2
+ pg_read_all_data | role_c | role_admin | t            | role_membership_test2
  pg_read_all_data | role_c | role_a     | f            | role_membership_test4
-(5 rows)
+ pg_read_all_data | role_d | role_admin | t            | role_membership_test4
+ role_a           | role_d | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | role_membership_test1
+ role_a           | role_e | role_admin | f            | 
+(9 rows)
 
+-- should deny database-specific grants for superuser roles?
